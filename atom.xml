<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>macrohaoのBLOG</title>
  
  <subtitle>振浩的个人博客</subtitle>
  <link href="http://macrohao.hithub.io/atom.xml" rel="self"/>
  
  <link href="http://macrohao.hithub.io/"/>
  <updated>2021-09-27T07:31:25.975Z</updated>
  <id>http://macrohao.hithub.io/</id>
  
  <author>
    <name>史振浩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/07/05/%E5%8F%8D%E5%B0%84/"/>
    <id>http://macrohao.hithub.io/2021/07/05/%E5%8F%8D%E5%B0%84/</id>
    <published>2021-07-05T01:12:32.000Z</published>
    <updated>2021-09-27T07:31:25.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h1><h3 id="1-什么是反射"><a href="#1-什么是反射" class="headerlink" title="1. 什么是反射"></a><em>1. 什么是反射</em></h3><p><strong>反射就是把<code>Java</code>类中的各种成分映射成一个个的<code>Java</code>对象。</strong></p><p>比如：有一个<code>Student</code>类，我想获取这个类当中的方法、构造器或者成员变量等属性，我可以通过反射获得<code>Student</code>类的对象，并通过相对应的获取方法(获取构造器的方法，获取成员变量的的方法等)获取到我想要的内容。</p><p><strong>测试用类</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    protected int age;</span><br><span class="line">    char sex;</span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line">    Student(String str)&#123;</span><br><span class="line">        System.out.println(&quot;默认的构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student()&#123;</span><br><span class="line">        System.out.println(&quot;公有无参构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(char name)&#123;</span><br><span class="line">        System.out.println(&quot;公有带参构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age)&#123;</span><br><span class="line">        System.out.println(&quot;公有多参数构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Student(boolean n)&#123;</span><br><span class="line">        System.out.println(&quot;受保护的构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Student(int age)&#123;</span><br><span class="line">        System.out.println(&quot;私有构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;is show()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show1(String s)&#123;</span><br><span class="line">        System.out.println(&quot;公有带参show1()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void show2()&#123;</span><br><span class="line">        System.out.println(&quot;受保护的无参show2()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void show3()&#123;</span><br><span class="line">        System.out.println(&quot;默认无参show3()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String show4(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">        System.out.println(&quot;私有无参show4&quot;);</span><br><span class="line">        return &quot;abcd&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, sex=&quot; + sex +</span><br><span class="line">                &quot;, phone=&#x27;&quot; + phone + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;main执行了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-Class类与reflect包"><a href="#2-Class类与reflect包" class="headerlink" title="2. Class类与reflect包"></a><em>2. <code>Class</code>类与<code>reflect</code>包</em></h3><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a><code>Class</code>类</h4><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><ol><li><code>Class</code>类是实现反射的关键所在，<code>Class</code>类的一个实例表示<code>Java</code>的一种数据类型，包括类，接口，枚举，注解，数组，基本数据类型和<code>void</code>。</li><li>每一种类型包括类和接口等，都有一个<code>Class</code>静态变量可以获得<code>Class</code>实例</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Class c1 = String.class;</span><br><span class="line">        String str = &quot;Hello&quot;;</span><br><span class="line">        Class c2 = str.getClass();</span><br><span class="line">        Class c3 = int.class;</span><br><span class="line">        Class c4 = Integer.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;c2类名称&quot; + c2.getName());</span><br><span class="line">        System.out.println(&quot;c2是否接口&quot; + c2.isInterface());</span><br><span class="line">        System.out.println(&quot;c2是否数组对象&quot; + c2.isArray());</span><br><span class="line">        System.out.println(&quot;c2父类名称&quot; + c2.getSuperclass().getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;c2是否基本类型&quot; + c2.isPrimitive());</span><br><span class="line">        System.out.println(&quot;c3是否基本类型&quot; + c3.isPrimitive());</span><br><span class="line">        System.out.println(&quot;c4是否基本类型&quot; + c4.isPrimitive());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c2类名称:java.lang.String</span><br><span class="line">c2是否接口:false</span><br><span class="line">c2是否数组对象:false</span><br><span class="line">c2父类名称:java.lang.Object</span><br><span class="line">c2是否基本类型:false</span><br><span class="line">c3是否基本类型:true</span><br><span class="line">c4是否基本类型:false</span><br></pre></td></tr></table></figure><h4 id="reflect包"><a href="#reflect包" class="headerlink" title="reflect包"></a><code>reflect</code>包</h4><p><strong>说明</strong></p><p><code>reflect</code>包提供了反射中用到的类，主要的说明如下：</p><ul><li><code>Constructor</code>类：提供类的构造方法信息</li><li><code>Field</code>类：提供类或接口成员变量信息。</li><li><code>Method</code>类：提供类或接口成员方法信息。</li><li><code>Array</code>类：提供动态创建和访问Java数组的方法。</li><li><code>Modifier</code>类：提供类和成员访问修饰符信息。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       try&#123;</span><br><span class="line">           Class c = Class.forName(&quot;java.lang.String&quot;);</span><br><span class="line">           Method[] methods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">           for (Method method:</span><br><span class="line">                methods) &#123;</span><br><span class="line">               System.out.println(Modifier.toString(method.getModifiers()));</span><br><span class="line">               System.out.println(&quot; &quot; + method.getReturnType().getName() + &quot; &quot;);</span><br><span class="line">               System.out.println(method.getName() + &quot;();&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;catch (ClassNotFoundException e)&#123;</span><br><span class="line">           System.out.println(&quot;找不到指定类&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取反射对象"><a href="#3-获取反射对象" class="headerlink" title="3. 获取反射对象"></a><em>3. 获取反射对象</em></h3><p><strong>说明：</strong></p><p><code>Java</code> 反射机制提供了3种创建对象方法：</p><ul><li>通过类获取反射对象</li><li>通过类变量获取反射对象</li><li>通过类路径来获取反射对象</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GetClassDemo &#123;</span><br><span class="line">    //获取反射对象</span><br><span class="line">    public static void main(String[] args)  &#123;</span><br><span class="line">        //1.从引用对象上获取Class</span><br><span class="line">        Student student1 = new Student();</span><br><span class="line">        Class stuClass01 = student1.getClass();</span><br><span class="line">        System.out.println(stuClass01.getName());</span><br><span class="line"></span><br><span class="line">        //2.直接从类上获取Class</span><br><span class="line">        Class stuClass02 = Student.class;</span><br><span class="line">        System.out.println(stuClass02 == stuClass01);</span><br><span class="line"></span><br><span class="line">        //3.从指定路径获取Class</span><br><span class="line">        Class stuClass03 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            stuClass03 = Class.forName(&quot;反射.Student&quot;);</span><br><span class="line">            System.out.println(stuClass03==stuClass02);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公有无参构造器</span><br><span class="line">reflect.Student</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="4-反射成员变量"><a href="#4-反射成员变量" class="headerlink" title="4. 反射成员变量"></a><em>4. 反射成员变量</em></h3><p><strong>说明：</strong></p><p>在<code>Field</code>类中，以下方法用于获取成员变量</p><ul><li><p>*Field[] getFields():*获取所有的”公有字段”</p></li><li><p>*Field[] getDeclaredFields():*获取所有字段，包括：私有、受保护、默认、公有；</p></li><li><p>*public Field getField(String fieldName):*获取某个”公有的”字段；</p></li><li><p>*public Field getDeclaredField(String fieldName):*获取某个字段(可以是私有的)</p></li></ul><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FieldDemo &#123;</span><br><span class="line">    //获取成员变量并调用</span><br><span class="line">    public static void main(String[] args) throws Exception, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        //获取Class对象</span><br><span class="line">        Class studentClass = Student.class;</span><br><span class="line"></span><br><span class="line">        //获取公有字段</span><br><span class="line">        System.out.println(&quot;--------------获取公有字段--------------&quot;);</span><br><span class="line">        Field[] fields= studentClass.getFields();</span><br><span class="line">        for (Field f:</span><br><span class="line">             fields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取所有字段</span><br><span class="line">        System.out.println(&quot;--------------获取所有字段--------------&quot;);</span><br><span class="line">        fields = studentClass.getDeclaredFields();</span><br><span class="line">        for (Field f:</span><br><span class="line">             fields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取公有字段并调用</span><br><span class="line">        System.out.println(&quot;--------------获取公有字段并调用--------------&quot;);</span><br><span class="line">        Field f = studentClass.getField(&quot;name&quot;);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        //获取一个对象</span><br><span class="line">        Object obj = studentClass.getConstructor().newInstance();</span><br><span class="line">        f.set(obj,&quot;葛二蛋&quot;);</span><br><span class="line">        Student stu = (Student)obj;</span><br><span class="line">        System.out.println(&quot;姓名：&quot; + stu.name);</span><br><span class="line"></span><br><span class="line">        //获取私有字段并调用</span><br><span class="line">        System.out.println(&quot;--------------获取私有字段并调用--------------&quot;);</span><br><span class="line">        f = studentClass.getDeclaredField(&quot;phone&quot;);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        f.setAccessible(true);</span><br><span class="line">        f.set(obj,&quot;1100000&quot;);</span><br><span class="line">        System.out.println(&quot;电话：&quot; + stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--------------获取公有字段--------------</span><br><span class="line">public java.lang.String reflect.Student.name</span><br><span class="line">--------------获取所有字段--------------</span><br><span class="line">public java.lang.String reflect.Student.name</span><br><span class="line">protected int reflect.Student.age</span><br><span class="line">char reflect.Student.sex</span><br><span class="line">private java.lang.String reflect.Student.phone</span><br><span class="line">--------------获取公有字段并调用--------------</span><br><span class="line">public java.lang.String reflect.Student.name</span><br><span class="line">公有无参构造器</span><br><span class="line">姓名：葛二蛋</span><br><span class="line">--------------获取私有字段并调用--------------</span><br><span class="line">private java.lang.String reflect.Student.phone</span><br><span class="line">电话：Student&#123;name=&#x27;葛二蛋&#x27;, age=0, sex= , phone=&#x27;1100000&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-反射成员方法"><a href="#5-反射成员方法" class="headerlink" title="5. 反射成员方法"></a><em>5. 反射成员方法</em></h3><p><strong>说明：</strong></p><p><code>Method</code>类有以下获取类成员方法的方法</p><ul><li><em>public Method[] getMethods():获取所有”公有方法”；（包含了父类的方法也包含Object类）</em></li><li><em>public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)</em></li><li><em>public Method getMethod(String name,Class&lt;?&gt;… parameterTypes)</em></li><li><em>public Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)</em></li></ul><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MethodDemo &#123;</span><br><span class="line">    //获取成员方法并调用</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        //获取Class对象</span><br><span class="line">        Class studentClass = Student.class;</span><br><span class="line"></span><br><span class="line">        //获取公有方法</span><br><span class="line">        System.out.println(&quot;--------------获取公有方法--------------&quot;);</span><br><span class="line">        Method[] methods = studentClass.getMethods();</span><br><span class="line">        for (Method m:</span><br><span class="line">             methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取所有方法</span><br><span class="line">        System.out.println(&quot;--------------获取所有方法--------------&quot;);</span><br><span class="line">        methods = studentClass.getDeclaredMethods();</span><br><span class="line">        for (Method m:</span><br><span class="line">             methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取公有show1()方法</span><br><span class="line">        System.out.println(&quot;--------------获取公有show1()方法--------------&quot;);</span><br><span class="line">        Method m = studentClass.getDeclaredMethod(&quot;show1&quot;, String.class);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        //实例化一个Student对象</span><br><span class="line">        Object obj = studentClass.getConstructor().newInstance();</span><br><span class="line">        m.invoke(obj,&quot;葛二蛋&quot;);</span><br><span class="line"></span><br><span class="line">        //获取私有的show4()方法</span><br><span class="line">        System.out.println(&quot;--------------获取私有show4()方法--------------&quot;);</span><br><span class="line">        m = studentClass.getDeclaredMethod(&quot;show4&quot;,int.class);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        m.setAccessible(true);</span><br><span class="line">        Object result = m.invoke(obj,20);</span><br><span class="line">        System.out.println(&quot;返回值：&quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--------------获取公有方法--------------</span><br><span class="line">public static void reflect.Student.main(java.lang.String[])</span><br><span class="line">public java.lang.String reflect.Student.toString()</span><br><span class="line">public void reflect.Student.show1(java.lang.String)</span><br><span class="line">public void reflect.Student.show()</span><br><span class="line">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">public native int java.lang.Object.hashCode()</span><br><span class="line">public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">public final native void java.lang.Object.notify()</span><br><span class="line">public final native void java.lang.Object.notifyAll()</span><br><span class="line">--------------获取所有方法--------------</span><br><span class="line">public static void reflect.Student.main(java.lang.String[])</span><br><span class="line">public java.lang.String reflect.Student.toString()</span><br><span class="line">private java.lang.String reflect.Student.show4(int)</span><br><span class="line">public void reflect.Student.show1(java.lang.String)</span><br><span class="line">void reflect.Student.show3()</span><br><span class="line">protected void reflect.Student.show2()</span><br><span class="line">public void reflect.Student.show()</span><br><span class="line">--------------获取公有show1()方法--------------</span><br><span class="line">public void reflect.Student.show1(java.lang.String)</span><br><span class="line">公有无参构造器</span><br><span class="line">公有带参show1()</span><br><span class="line">--------------获取私有show4()方法--------------</span><br><span class="line">private java.lang.String reflect.Student.show4(int)</span><br><span class="line">私有无参show4</span><br><span class="line">返回值：abcd</span><br></pre></td></tr></table></figure><h3 id="6-反射构造方法"><a href="#6-反射构造方法" class="headerlink" title="6. 反射构造方法"></a><em>6. 反射构造方法</em></h3><p><strong>说明：</strong></p><p>在<code>Constructor</code>类下，有以下获取构造器的方法</p><ul><li><em>public Constructor[] getConstructors()：所有”公有的”构造方法</em></li><li><em>public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)</em></li><li><em>public Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法：</em></li><li><em>public Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有；</em></li></ul><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ConstructDemo &#123;</span><br><span class="line">    //获取构造方法</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        //1.加载Class对象</span><br><span class="line">        Class studentClass = Student.class;</span><br><span class="line"></span><br><span class="line">        //获取公有构造方法</span><br><span class="line">        System.out.println(&quot;----------------公有构造方法----------------&quot;);</span><br><span class="line">        Constructor[] constructors = studentClass.getConstructors();</span><br><span class="line">        for (Constructor c:</span><br><span class="line">             constructors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取所有构造方法</span><br><span class="line">        System.out.println(&quot;----------------所有构造方法----------------&quot;);</span><br><span class="line">        constructors = studentClass.getDeclaredConstructors();</span><br><span class="line">        for (Constructor c:</span><br><span class="line">             constructors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获取公有无参构造方法</span><br><span class="line">        System.out.println(&quot;----------------公有无参构造方法----------------&quot;);</span><br><span class="line">        Constructor con = studentClass.getConstructor(null);</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        //调用构造方法</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        //获取私有构造方法</span><br><span class="line">        System.out.println(&quot;----------------私有构造方法----------------&quot;);</span><br><span class="line">        con = studentClass.getDeclaredConstructor(char.class);</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        //调用构造方法</span><br><span class="line">        con.setAccessible(true);</span><br><span class="line">        obj = con.newInstance(&#x27;男&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----------------公有构造方法----------------</span><br><span class="line">public reflect.Student(java.lang.String,int)</span><br><span class="line">public reflect.Student()</span><br><span class="line">public reflect.Student(char)</span><br><span class="line">----------------所有构造方法----------------</span><br><span class="line">private reflect.Student(int)</span><br><span class="line">protected reflect.Student(boolean)</span><br><span class="line">public reflect.Student(java.lang.String,int)</span><br><span class="line">reflect.Student(java.lang.String)</span><br><span class="line">public reflect.Student()</span><br><span class="line">public reflect.Student(char)</span><br><span class="line">----------------公有无参构造方法----------------</span><br><span class="line">public reflect.Student()</span><br><span class="line">公有无参构造器</span><br><span class="line">----------------私有构造方法----------------</span><br><span class="line">public reflect.Student(char)</span><br><span class="line">公有带参构造器</span><br></pre></td></tr></table></figure><h3 id="7-反射-main方法"><a href="#7-反射-main方法" class="headerlink" title="7. 反射 main方法"></a><em>7. 反射 <code>main</code>方法</em></h3><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainDemo &#123;</span><br><span class="line">    //反射main方法</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //获取Student对象的字节码</span><br><span class="line">        Class studentClass = Class.forName(&quot;reflect.Student&quot;);</span><br><span class="line"></span><br><span class="line">        //获取main方法</span><br><span class="line">        Method mainMethod = studentClass.getMethod(&quot;main&quot;,String[].class);</span><br><span class="line"></span><br><span class="line">        //调用main方法</span><br><span class="line">        mainMethod.invoke(null,(Object)new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main执行了！</span><br></pre></td></tr></table></figure><h3 id="8-通过反射加载配置文件"><a href="#8-通过反射加载配置文件" class="headerlink" title="8. 通过反射加载配置文件"></a><em>8. 通过反射加载配置文件</em></h3><p>通过反射机制来加载配置文件，当遇到需求变更时，业务逻辑的内容不需要更改，这时只需要更改配置文件即可。</p><p><strong>Student类</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public void show()&#123;</span><br><span class="line">System.out.println(&quot;is show()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件（pro.txt）：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">className=reflect.Student</span><br><span class="line">methodName=show</span><br></pre></td></tr></table></figure><p><strong>需求一实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PropertiesDemo &#123;</span><br><span class="line">    //修改配置信息</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        //获取Class对象</span><br><span class="line">        Class studentClass = Class.forName(getValue(&quot;className&quot;));</span><br><span class="line">        //获取show方法</span><br><span class="line">        Method m = studentClass.getMethod(getValue(&quot;methodName&quot;));</span><br><span class="line">        //调用show()方法</span><br><span class="line">        m.invoke(studentClass.getConstructor().newInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getValue(String key) throws IOException &#123;</span><br><span class="line">        Properties pro = new Properties();</span><br><span class="line">        FileReader in = new FileReader(&quot;D://pro.txt&quot;);</span><br><span class="line">        pro.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        return pro.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">is show()</span><br></pre></td></tr></table></figure><p><strong>当升级这个系统时，不需要修改业务逻辑，只需要更改pro.txt的文件内容就可以了。</strong></p><p><strong>要替换的Student 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student2 &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public void show2()&#123;</span><br><span class="line">System.out.println(&quot;is show2()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件更改为：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">className=reflect.Student2</span><br><span class="line">methodName=show2</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/sinat_38259539/article/details/71799078">Java基础之—反射（非常重要）_sinat_38259539的博客-CSDN博客_java 反射</a></p><p><em>（本笔记为该文章学习笔记）</em></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java-反射&quot;&gt;&lt;a href=&quot;#Java-反射&quot; class=&quot;headerlink&quot; title=&quot;Java 反射&quot;&gt;&lt;/a&gt;Java 反射&lt;/h1&gt;&lt;h3 id=&quot;1-什么是反射&quot;&gt;&lt;a href=&quot;#1-什么是反射&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是反射&quot;&gt;&lt;/a&gt;&lt;em&gt;1. 什么是反射&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;反射就是把&lt;code&gt;Java&lt;/code&gt;类中的各种成分映射成一个个的&lt;code&gt;Java&lt;/code&gt;对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：有一个&lt;code&gt;Student&lt;/code&gt;类，我想获取这个类当中的方法、构造器或者成员变量等属性，我可以通过反射获得&lt;code&gt;Student&lt;/code&gt;类的对象，并通过相对应的获取方法(获取构造器的方法，获取成员变量的的方法等)获取到我想要的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试用类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Student &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected int age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String phone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student(String str)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;默认的构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Student()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;公有无参构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Student(char name)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;公有带参构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Student(String name, int age)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;公有多参数构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected Student(boolean n)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;受保护的构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Student(int age)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;私有构造器&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void show()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;is show()&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void show1(String s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;公有带参show1()&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void show2()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;受保护的无参show2()&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void show3()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;默认无参show3()&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String show4(int age)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;私有无参show4&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;abcd&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;Student&amp;#123;&amp;quot; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;name=&amp;#x27;&amp;quot; + name + &amp;#x27;\&amp;#x27;&amp;#x27; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;, age=&amp;quot; + age +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;, sex=&amp;quot; + sex +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;, phone=&amp;#x27;&amp;quot; + phone + &amp;#x27;\&amp;#x27;&amp;#x27; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#x27;&amp;#125;&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;main执行了！&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://macrohao.hithub.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1001</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1001%20A+B%20Format%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1001%20A+B%20Format%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:18:44.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1001-A-B-Format-20-分"><a href="#1001-A-B-Format-20-分" class="headerlink" title="1001 A+B Format (20 分)"></a>1001 A+B Format (20 分)</h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where −106≤<em>a</em>,<em>b</em>≤106. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1000000 9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-999,991</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">    int sum=a+b;</span><br><span class="line">    int answer[20],n=0;</span><br><span class="line">    if(sum&lt;0)&#123;</span><br><span class="line">        printf(&quot;-&quot;);</span><br><span class="line">        sum=-sum;</span><br><span class="line">    &#125;</span><br><span class="line">    int len=0,num[10];</span><br><span class="line">    if(sum==0) num[len++]=0;</span><br><span class="line">    while(sum)&#123;</span><br><span class="line">        num[len++]=sum%10;</span><br><span class="line">        sum /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)&#123;</span><br><span class="line">        printf(&quot;%d&quot;,num[i]);</span><br><span class="line">        if(i&gt;0&amp;&amp;i%3==0)</span><br><span class="line">            printf(&quot;,&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1001-A-B-Format-20-分&quot;&gt;&lt;a href=&quot;#1001-A-B-Format-20-分&quot; class=&quot;headerlink&quot; title=&quot;1001 A+B Format (20 分)&quot;&gt;&lt;/a&gt;1001 A+B Format (20 分)&lt;/</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1002</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1002%20A+B%20for%20Polynomials%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1002%20A+B%20for%20Polynomials%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:18:36.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1002-A-B-for-Polynomials-25-分"><a href="#1002-A-B-for-Polynomials-25-分" class="headerlink" title="1002 A+B for Polynomials (25 分)"></a>1002 A+B for Polynomials (25 分)</h1><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p><em>K</em> <em>N</em>1 <em>a**N</em>1 <em>N</em>2 <em>a**N</em>2 … <em>N**K</em> <em>a<strong>N</strong>K</em></p><p>where <em>K</em> is the number of nonzero terms in the polynomial, <em>N**i</em> and <em>a<strong>N</strong>i</em> (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10，0≤<em>N**K</em>&lt;⋯&lt;<em>N</em>2&lt;<em>N</em>1≤1000.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 2 1.5 1 2.9 0 3.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int m;</span><br><span class="line">double a[1010]=&#123;0.0&#125;;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    int x;</span><br><span class="line">    double y;</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">        scanf(&quot;%d %lf&quot;,&amp;x,&amp;y);</span><br><span class="line">        a[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    int n,cnt=0;</span><br><span class="line">    cin&gt;&gt;n; </span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d %lf&quot;,&amp;x,&amp;y);</span><br><span class="line">        a[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;1010;i++)&#123;</span><br><span class="line">        if(a[i]!=0)</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,cnt);</span><br><span class="line">    for(int i=1000;i&gt;=0;i--)&#123;</span><br><span class="line">        if(a[i]!=0)&#123;</span><br><span class="line">         printf(&quot; %d %.1f&quot;,i,a[i]);</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1002-A-B-for-Polynomials-25-分&quot;&gt;&lt;a href=&quot;#1002-A-B-for-Polynomials-25-分&quot; class=&quot;headerlink&quot; title=&quot;1002 A+B for Polynomials (25 分)&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1005</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1005%20Spell%20It%20Right%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1005%20Spell%20It%20Right%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:18:28.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1005-Spell-It-Right-20-分"><a href="#1005-Spell-It-Right-20-分" class="headerlink" title="1005 Spell It Right (20 分)"></a>1005 Spell It Right (20 分)</h1><p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12345</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one five</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">思路：</span><br><span class="line">分解求和，逆序到数组内，再引用数组输出</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">char num[10][10]=&#123;&quot;zero&quot;,&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;,&quot;seven&quot;,&quot;eight&quot;,&quot;nine&quot;&#125;;</span><br><span class="line">int digit[10];</span><br><span class="line">char s[111];</span><br><span class="line">int main()&#123;</span><br><span class="line">    scanf(&quot;%s&quot;,s);</span><br><span class="line">    int len=strlen(s),sum=0,numLen=0;</span><br><span class="line">    for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">        sum += (s[i]-&#x27;0&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(sum==0) printf(&quot;%s&quot;,num[0]);</span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">        while(sum)&#123;</span><br><span class="line">            digit[numLen++] = sum%10;</span><br><span class="line">            sum /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=numLen-1;i&gt;=0;i--)&#123;</span><br><span class="line">            printf(&quot;%s&quot;,num[digit[i]]);</span><br><span class="line">            if(i!=0) printf(&quot; &quot;);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1005-Spell-It-Right-20-分&quot;&gt;&lt;a href=&quot;#1005-Spell-It-Right-20-分&quot; class=&quot;headerlink&quot; title=&quot;1005 Spell It Right (20 分)&quot;&gt;&lt;/a&gt;1005 Spell I</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1006</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1006%20Sign%20In%20and%20Sign%20Out%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1006%20Sign%20In%20and%20Sign%20Out%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:18:57.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1006-Sign-In-and-Sign-Out-25-分"><a href="#1006-Sign-In-and-Sign-Out-25-分" class="headerlink" title="1006 Sign In and Sign Out (25 分)"></a>1006 Sign In and Sign Out (25 分)</h1><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ID_number Sign_in_time Sign_out_time</span><br></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">CS301111 15:30:28 17:00:10</span><br><span class="line">SC3021234 08:00:00 11:25:25</span><br><span class="line">CS301133 21:45:00 21:58:40结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SC3021234 CS30113</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct time&#123;</span><br><span class="line">    char id[20];</span><br><span class="line">    int hour1,minute1,second1;</span><br><span class="line">    int hour2,minute2,second2;</span><br><span class="line">&#125; temp,earlist,latst;</span><br><span class="line"></span><br><span class="line">bool early(struct time a,struct time b)&#123;</span><br><span class="line">    if(a.hour1!=b.hour1)</span><br><span class="line">        return a.hour1 &lt; b.hour1;</span><br><span class="line">    else if(a.minute1 != b.minute1)</span><br><span class="line">        return a.minute1 &lt; b.minute1;</span><br><span class="line">    else</span><br><span class="line">    return a.second1 &lt; b.second1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool late(struct time a,struct time b)&#123;</span><br><span class="line">    if(a.hour2!=b.hour2)</span><br><span class="line">        return a.hour2 &gt; b.hour2;</span><br><span class="line">    else if(a.minute2 != b.minute2)</span><br><span class="line">        return a.minute2 &gt; b.minute2;</span><br><span class="line">    else</span><br><span class="line">    return a.second2 &gt; b.second2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    earlist.hour1=24;</span><br><span class="line">    earlist.minute1=60;</span><br><span class="line">    earlist.second1=60;</span><br><span class="line">    latst.hour2=0;</span><br><span class="line">    latst.minute2=0;</span><br><span class="line">    latst.second2=0;</span><br><span class="line"> </span><br><span class="line">    while(n--)&#123;</span><br><span class="line">        scanf(&quot;%s %d:%d:%d %d:%d:%d&quot;,temp.id ,&amp;temp.hour1 ,&amp;temp.minute1 ,&amp;temp.second1 ,&amp;temp.hour2 ,&amp;temp.minute2 ,&amp;temp.second2);</span><br><span class="line">        if(late(temp,latst))</span><br><span class="line">            latst = temp;</span><br><span class="line">        if(early(temp,earlist))</span><br><span class="line">            earlist = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%s %s&quot;,earlist.id,latst.id);</span><br><span class="line">  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1006-Sign-In-and-Sign-Out-25-分&quot;&gt;&lt;a href=&quot;#1006-Sign-In-and-Sign-Out-25-分&quot; class=&quot;headerlink&quot; title=&quot;1006 Sign In and Sign Out (25 分)</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1009</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1009%20Product%20of%20Polynomials%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1009%20Product%20of%20Polynomials%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:19:19.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1009-Product-of-Polynomials-25-分"><a href="#1009-Product-of-Polynomials-25-分" class="headerlink" title="1009 Product of Polynomials (25 分)"></a>1009 Product of Polynomials (25 分)</h1><p>This time, you are supposed to find <em>A</em>×<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p><em>K</em> <em>N</em>1 <em>a**N</em>1 <em>N</em>2 <em>a**N</em>2 … <em>N**K</em> <em>a<strong>N</strong>K</em></p><p>where <em>K</em> is the number of nonzero terms in the polynomial, <em>N**i</em> and <em>a<strong>N</strong>i</em> (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10, 0≤<em>N**K</em>&lt;⋯&lt;<em>N</em>2&lt;<em>N</em>1≤1000.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3 3.6 2 6.0 1 1.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">double a[1010]=&#123;0&#125;,b[1010]=&#123;0&#125;,c[2020]=&#123;0&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n,x,cnt=0;</span><br><span class="line">    double y;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">       scanf(&quot;%d %lf&quot;,&amp;x,&amp;y);</span><br><span class="line">        a[x]=y;</span><br><span class="line">    &#125;  </span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">       scanf(&quot;%d %lf&quot;,&amp;x,&amp;y);</span><br><span class="line">        b[x]=y;</span><br><span class="line">    &#125; </span><br><span class="line">    int j;</span><br><span class="line">    for(int i=0;i&lt;=1000;i++)&#123;</span><br><span class="line">      for(j=0;j&lt;=1000;j++)&#123;</span><br><span class="line">          if(a[i]!=0&amp;&amp;b[j]!=0)&#123;</span><br><span class="line">              c[i+j] += a[i]*b[j];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     for(int i=0;i&lt;=2000;i++)&#123;</span><br><span class="line">     if(c[i])</span><br><span class="line"> cnt++;</span><br><span class="line"> &#125;</span><br><span class="line">    printf(&quot;%d&quot;,cnt);</span><br><span class="line">    for(int i=2000;i&gt;=0;i--)&#123;</span><br><span class="line">    if(c[i]!=0) </span><br><span class="line">        printf(&quot; %d %.1f&quot;,i,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1009-Product-of-Polynomials-25-分&quot;&gt;&lt;a href=&quot;#1009-Product-of-Polynomials-25-分&quot; class=&quot;headerlink&quot; title=&quot;1009 Product of Polynomials </summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1008</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1008%20Elevator%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1008%20Elevator%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:19:07.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1008-Elevator-20-分"><a href="#1008-Elevator-20-分" class="headerlink" title="1008 Elevator (20 分)"></a>1008 Elevator (20 分)</h1><p>The highest building in our city has only one elevator. A request list is made up with <em>N</em> positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> positive numbers. All the numbers in the input are less than 100.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the total time on a single line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 2 3 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">41</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[110];</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,sum=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    sum = (a[0]-0)*6+5;</span><br><span class="line">    </span><br><span class="line">    for(int i=0;i&lt;n-1;i++)&#123;</span><br><span class="line">             if(a[i]&lt;a[i+1])&#123;</span><br><span class="line">                sum += (a[i+1]-a[i]) * 6 +5;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                sum += (a[i]-a[i+1]) * 4 + 5;</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1008-Elevator-20-分&quot;&gt;&lt;a href=&quot;#1008-Elevator-20-分&quot; class=&quot;headerlink&quot; title=&quot;1008 Elevator (20 分)&quot;&gt;&lt;/a&gt;1008 Elevator (20 分)&lt;/h1&gt;&lt;p&gt;Th</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1011</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1011%20World%20Cup%20Betting%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1011%20World%20Cup%20Betting%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:19:35.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1011-World-Cup-Betting-20-分"><a href="#1011-World-Cup-Betting-20-分" class="headerlink" title="1011 World Cup Betting (20 分)"></a>1011 World Cup Betting (20 分)</h1><p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p><p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely <code>W</code> for win, <code>T</code> for tie, and <code>L</code> for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p><p>For example, 3 games’ odds are given as the following:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> W    T    L</span><br><span class="line">1.1  2.5  1.7</span><br><span class="line">1.2  3.1  1.6</span><br><span class="line">4.1  1.2  1.1</span><br></pre></td></tr></table></figure><p>To obtain the maximum profit, one must buy <code>W</code> for the 3rd game, <code>T</code> for the 2nd game, and <code>T</code> for the 1st game. If each bet takes 2 yuans, then the maximum profit would be (4.1×3.1×2.5×65%−1)×2=39.31 yuans (accurate up to 2 decimal places).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to <code>W</code>, <code>T</code> and <code>L</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.1 2.5 1.7</span><br><span class="line">1.2 3.1 1.6</span><br><span class="line">4.1 1.2 1.1结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T T W 39.31</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    double a,b,c,Max,ans=1.0;</span><br><span class="line">    while(scanf(&quot;%lf %lf %lf&quot;,&amp;a,&amp;b,&amp;c)!=EOF)&#123;</span><br><span class="line">        Max = max(a,max(b,c));</span><br><span class="line">        if(Max == a)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;W &quot;;</span><br><span class="line">        &#125;else if(Max ==b)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;T &quot;;</span><br><span class="line">        &#125;else</span><br><span class="line">            cout&lt;&lt;&quot;L &quot;;</span><br><span class="line">        ans *= Max;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans*0.65 -1)*2;</span><br><span class="line">    printf(&quot;%.2lf&quot;,ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1011-World-Cup-Betting-20-分&quot;&gt;&lt;a href=&quot;#1011-World-Cup-Betting-20-分&quot; class=&quot;headerlink&quot; title=&quot;1011 World Cup Betting (20 分)&quot;&gt;&lt;/a&gt;101</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1012</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1012%20The%20Best%20Rank%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1012%20The%20Best%20Rank%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:19:45.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1012-The-Best-Rank-25-分"><a href="#1012-The-Best-Rank-25-分" class="headerlink" title="1012 The Best Rank (25 分)"></a>1012 The Best Rank (25 分)</h1><p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StudentID  C  M  E  A</span><br><span class="line">310101     98 85 88 90</span><br><span class="line">310102     70 95 88 84</span><br><span class="line">310103     82 87 94 88</span><br><span class="line">310104     91 91 91 91</span><br></pre></td></tr></table></figure><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">310101 98 85 88</span><br><span class="line">310102 70 95 88</span><br><span class="line">310103 82 87 94</span><br><span class="line">310104 91 91 91</span><br><span class="line">310105 85 90 90</span><br><span class="line">310101</span><br><span class="line">310102</span><br><span class="line">310103</span><br><span class="line">310104</span><br><span class="line">310105</span><br><span class="line">999999结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 C</span><br><span class="line">1 M</span><br><span class="line">1 E</span><br><span class="line">1 A</span><br><span class="line">3 A</span><br><span class="line">N/A结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student&#123;</span><br><span class="line">    int id;</span><br><span class="line">    int grade[4];</span><br><span class="line">&#125; stu[2010];</span><br><span class="line"></span><br><span class="line">int now;</span><br><span class="line">int rank1[1000000][4]=&#123;0&#125;;</span><br><span class="line">char subject[4]=&#123;&#x27;A&#x27;,&#x27;C&#x27;,&#x27;M&#x27;,&#x27;E&#x27;&#125;;</span><br><span class="line">bool cmp(student a,student b)&#123;</span><br><span class="line">    return a.grade[now]&gt;b.grade[now];</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d %d %d %d&quot;,&amp;stu[i].id,&amp;stu[i].grade[1],&amp;stu[i].grade[2],&amp;stu[i].grade[3]);</span><br><span class="line">        stu[i].grade[0] = round((stu[i].grade[1] + stu[i].grade[2] + stu[i].grade[3])/3.0 )+0.5;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(now=0;now&lt;4;now++)&#123;</span><br><span class="line">        sort(stu,stu+n,cmp);</span><br><span class="line">        rank1[stu[0].id][now]=1;</span><br><span class="line">        for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">            if(stu[i].grade[now]==stu[i-1].grade[now])&#123;</span><br><span class="line">               rank1[stu[i].id][now]=rank1[stu[i-1].id][now]; </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                rank1[stu[i].id][now]=i+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int temp;</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;temp);</span><br><span class="line">        if(rank1[temp][0]==0)&#123;</span><br><span class="line">            printf(&quot;N/A\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            int sign=0;</span><br><span class="line">            for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">                if(rank1[temp][j]&lt;rank1[temp][sign])&#123;</span><br><span class="line">                    sign=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%d %c\n&quot;,rank1[temp][sign],subject[sign]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1012-The-Best-Rank-25-分&quot;&gt;&lt;a href=&quot;#1012-The-Best-Rank-25-分&quot; class=&quot;headerlink&quot; title=&quot;1012 The Best Rank (25 分)&quot;&gt;&lt;/a&gt;1012 The Best R</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 10119</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1019%20General%20Palindromic%20Number%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1019%20General%20Palindromic%20Number%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:01.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1019-General-Palindromic-Number-20-分"><a href="#1019-General-Palindromic-Number-20-分" class="headerlink" title="1019 General Palindromic Number (20 分)"></a>1019 General Palindromic Number (20 分)</h1><p>A number that will be the same when it is written forwards or backwards is known as a <strong>Palindromic Number</strong>. For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.</p><p>Although palindromic numbers are most often considered in the decimal system, the concept of palindromicity can be applied to the natural numbers in any numeral system. Consider a number <em>N</em>&gt;0 in base <em>b</em>≥2, where it is written in standard notation with <em>k</em>+1 digits <em>a**i</em> as ∑<em>i</em>=0<em>k</em>(<em>a<strong>i</strong>b**i</em>). Here, as usual, 0≤<em>a**i</em>&lt;<em>b</em> for all <em>i</em> and <em>a**k</em> is non-zero. Then <em>N</em> is palindromic if and only if <em>a**i</em>=<em>a**k</em>−<em>i</em> for all <em>i</em>. Zero is written 0 in any base and is also palindromic by definition.</p><p>Given any positive decimal integer <em>N</em> and a base <em>b</em>, you are supposed to tell if <em>N</em> is a palindromic number in base <em>b</em>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case consists of two positive numbers <em>N</em> and <em>b</em>, where 0&lt;<em>N</em>≤109 is the decimal number and 2≤<em>b</em>≤109 is the base. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line <code>Yes</code> if <em>N</em> is a palindromic number in base <em>b</em>, or <code>No</code> if not. Then in the next line, print <em>N</em> as the number in base <em>b</em> in the form “<em>a**k</em> <em>a**k</em>−1 … <em>a</em>0”. Notice that there must be no extra space at the end of output.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">27 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">1 1 0 1 1结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">121 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No</span><br><span class="line">4 4 1结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[1010];</span><br><span class="line"></span><br><span class="line">int huiwen(int a[],int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(a[i]!=a[n-1-i])&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    long long n,b;</span><br><span class="line">    scanf(&quot;%lld %lld&quot;,&amp;n,&amp;b);</span><br><span class="line">    int cnt=0;</span><br><span class="line">    do&#123;</span><br><span class="line">        a[cnt++]=n % b;</span><br><span class="line">        n/=b;</span><br><span class="line">    &#125;while(n);</span><br><span class="line">    if(huiwen(a,cnt))&#123;</span><br><span class="line">        printf(&quot;Yes\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;No\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=cnt-1;i&gt;=0;i--)&#123;</span><br><span class="line">        printf(&quot;%d&quot;,a[i]);</span><br><span class="line">        if(i&gt;0)</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1019-General-Palindromic-Number-20-分&quot;&gt;&lt;a href=&quot;#1019-General-Palindromic-Number-20-分&quot; class=&quot;headerlink&quot; title=&quot;1019 General Palindr</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1015</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1015%20Reversible%20Primes%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1015%20Reversible%20Primes%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:19:53.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1015-Reversible-Primes-20-分"><a href="#1015-Reversible-Primes-20-分" class="headerlink" title="1015 Reversible Primes (20 分)"></a>1015 Reversible Primes (20 分)</h1><p>A <strong>reversible prime</strong> in any number system is a prime whose “reverse” in that number system is also a prime. For example in the decimal system 73 is a reversible prime because its reverse 37 is also a prime.</p><p>Now given any two positive integers <em>N</em> (&lt;105) and <em>D</em> (1&lt;<em>D</em>≤10), you are supposed to tell if <em>N</em> is a reversible prime with radix <em>D</em>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>The input file consists of several test cases. Each case occupies a line which contains two integers <em>N</em> and <em>D</em>. The input is finished by a negative <em>N</em>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line <code>Yes</code> if <em>N</em> is a reversible prime with radix <em>D</em>, or <code>No</code> if not.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">73 10</span><br><span class="line">23 2</span><br><span class="line">23 10</span><br><span class="line">-2结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isprime(int m)&#123;</span><br><span class="line">    if(m&lt;=1) return false;</span><br><span class="line">    for(int i=2;i*i&lt;=m;i++)&#123;</span><br><span class="line">        if(m%i==0) return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int reverse(int m,int n)&#123;</span><br><span class="line">    int a[100],num=0;</span><br><span class="line">    while(m)&#123;</span><br><span class="line">        a[num++]=m % n;</span><br><span class="line">        m = m / n;</span><br><span class="line">    &#125;</span><br><span class="line">    int temp=0;</span><br><span class="line">    for(int i=0;i&lt;num;i++)&#123;</span><br><span class="line">        temp = temp * n + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;m,&amp;n)&amp;&amp;m&gt;0)&#123;</span><br><span class="line">        if(isprime(m)==false)&#123;</span><br><span class="line">            printf(&quot;No\n&quot;);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(isprime(reverse(m,n))==true)&#123;</span><br><span class="line">                printf(&quot;Yes\n&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                printf(&quot;No\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1015-Reversible-Primes-20-分&quot;&gt;&lt;a href=&quot;#1015-Reversible-Primes-20-分&quot; class=&quot;headerlink&quot; title=&quot;1015 Reversible Primes (20 分)&quot;&gt;&lt;/a&gt;101</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1025</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1025%20PAT%20Ranking%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1025%20PAT%20Ranking%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:12.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1025-PAT-Ranking-25-分"><a href="#1025-PAT-Ranking-25-分" class="headerlink" title="1025 PAT Ranking (25 分)"></a>1025 PAT Ranking (25 分)</h1><p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤100), the number of test locations. Then <em>N</em> ranklists follow, each starts with a line containing a positive integer <em>K</em> (≤300), the number of testees, and then <em>K</em> lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure><p>The locations are numbered from 1 to <em>N</em>. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student&#123;</span><br><span class="line">    char id[20];</span><br><span class="line">    int location_number;</span><br><span class="line">    int score;</span><br><span class="line">    int local_rank;</span><br><span class="line">&#125; stu[30010];</span><br><span class="line"></span><br><span class="line">bool cmp(student A,student B)&#123;</span><br><span class="line">    if(A.score!=B.score)</span><br><span class="line">        return A.score&gt;B.score;</span><br><span class="line">    else</span><br><span class="line">        return strcmp(A.id,B.id)&lt;0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n,k,cnt=0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line">for(int j=0;j&lt;k;j++)&#123;</span><br><span class="line">scanf(&quot;%s %d&quot;,stu[cnt].id,&amp;stu[cnt].score);</span><br><span class="line">stu[cnt].location_number=i;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(stu+cnt-k,stu+cnt,cmp);</span><br><span class="line"></span><br><span class="line">stu[cnt-k].local_rank=1;</span><br><span class="line">for(int j=1;j&lt;k;j++)&#123;</span><br><span class="line">if(stu[cnt-k+j].score==stu[cnt-k+j-1].score)&#123;</span><br><span class="line">stu[cnt-k+j].local_rank=stu[cnt-k+j-1].local_rank;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">stu[cnt-k+j].local_rank=j+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;%d\n&quot;,cnt);</span><br><span class="line">    </span><br><span class="line">    sort(stu,stu+cnt,cmp);</span><br><span class="line">    int r=1;</span><br><span class="line">    for(int i=0;i&lt;cnt;i++)&#123;</span><br><span class="line">    if(i&gt;0&amp;&amp;stu[i].score!=stu[i-1].score)&#123;</span><br><span class="line">    r=i+1;</span><br><span class="line">&#125;</span><br><span class="line">        printf(&quot;%s %d %d %d\n&quot;,stu[i].id,r,stu[i].location_number,stu[i].local_rank);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1025-PAT-Ranking-25-分&quot;&gt;&lt;a href=&quot;#1025-PAT-Ranking-25-分&quot; class=&quot;headerlink&quot; title=&quot;1025 PAT Ranking (25 分)&quot;&gt;&lt;/a&gt;1025 PAT Ranking (25 </summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1027</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1027%20Colors%20in%20Mars%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1027%20Colors%20in%20Mars%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:27.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1027-Colors-in-Mars-20-分"><a href="#1027-Colors-in-Mars-20-分" class="headerlink" title="1027 Colors in Mars (20 分)"></a>1027 Colors in Mars (20 分)</h1><p>People in Mars represent the colors in their computers in a similar way as the Earth people. That is, a color is represented by a 6-digit number, where the first 2 digits are for <code>Red</code>, the middle 2 digits for <code>Green</code>, and the last 2 digits for <code>Blue</code>. The only difference is that they use radix 13 (0-9 and A-C) instead of 16. Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case which occupies a line containing the three decimal color values.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the Mars RGB value in the following format: first output <code>#</code>, then followed by a 6-digit number where all the English characters must be upper-cased. If a single color is only 1-digit long, you must print a <code>0</code> to its left.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15 43 71</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char radix[13]=&#123;&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;&#125;;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[10],cnt=0,r,g,b;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;,&amp;r,&amp;g,&amp;b);</span><br><span class="line">    printf(&quot;#&quot;);</span><br><span class="line">    printf(&quot;%c%c&quot;,radix[r/13],radix[r%13]);</span><br><span class="line">    printf(&quot;%c%c&quot;,radix[g/13],radix[g%13]);</span><br><span class="line">    printf(&quot;%c%c&quot;,radix[b/13],radix[b%13]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1027-Colors-in-Mars-20-分&quot;&gt;&lt;a href=&quot;#1027-Colors-in-Mars-20-分&quot; class=&quot;headerlink&quot; title=&quot;1027 Colors in Mars (20 分)&quot;&gt;&lt;/a&gt;1027 Colors </summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1028</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1028%20List%20Sorting%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1028%20List%20Sorting%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:35.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1028-List-Sorting-25-分"><a href="#1028-List-Sorting-25-分" class="headerlink" title="1028 List Sorting (25 分)"></a>1028 List Sorting (25 分)</h1><p>Excel can sort records according to any column. Now you are supposed to imitate this function.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two integers <em>N</em> (≤105) and <em>C</em>, where <em>N</em> is the number of records and <em>C</em> is the column that you are supposed to sort the records with. Then <em>N</em> lines follow, each contains a record of a student. A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output the sorting result in <em>N</em> lines. That is, if <em>C</em> = 1 then the records must be sorted in increasing order according to ID’s; if <em>C</em> = 2 then the records must be sorted in non-decreasing order according to names; and if <em>C</em> = 3 then the records must be sorted in non-decreasing order according to grades. If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000001 Zoe 60</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 2</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br><span class="line">000002 James 98</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000010 Amy 90</span><br><span class="line">000002 James 98</span><br><span class="line">000007 James 85</span><br><span class="line">000001 Zoe 60</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br><span class="line">000002 James 9</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">000002 James 9</span><br><span class="line">000001 Zoe 60</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br></pre></td></tr></table></figure><p><strong>鸣谢用户 wangzhj 补充数据！</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student&#123;</span><br><span class="line">    int id;</span><br><span class="line">    char name[10];</span><br><span class="line">    int score;</span><br><span class="line">&#125; stu[100010];</span><br><span class="line"></span><br><span class="line">bool cmp1(student a,student b)&#123;</span><br><span class="line">    return a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp2(student a,student b)&#123;</span><br><span class="line">    int s=strcmp(a.name,b.name);</span><br><span class="line">    if(s!=0) return strcmp(a.name,b.name)&lt;1;</span><br><span class="line">    else return a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool cmp3(student a,student b)&#123;</span><br><span class="line">    if(a.score!=b.score) return a.score&lt;b.score;</span><br><span class="line">    else return a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,c;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;c);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d%s%d&quot;,&amp;stu[i].id,stu[i].name,&amp;stu[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    if(c==1) sort(stu,stu+n,cmp1);</span><br><span class="line">    if(c==2) sort(stu,stu+n,cmp2);</span><br><span class="line">    if(c==3) sort(stu,stu+n,cmp3);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        printf(&quot;%06d %s %d\n&quot;,stu[i].id,stu[i].name,stu[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1028-List-Sorting-25-分&quot;&gt;&lt;a href=&quot;#1028-List-Sorting-25-分&quot; class=&quot;headerlink&quot; title=&quot;1028 List Sorting (25 分)&quot;&gt;&lt;/a&gt;1028 List Sorting </summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1029</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1029%20Median%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1029%20Median%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:45.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1029-Median-25-分"><a href="#1029-Median-25-分" class="headerlink" title="1029 Median (25 分)"></a>1029 Median (25 分)</h1><p>Given an increasing sequence S of N integers, the median is the number at the middle position. For example, the median of S1 = { 11, 12, 13, 14 } is 12, and the median of S2 = { 9, 10, 15, 16, 17 } is 15. The median of two sequences is defined to be the median of the nondecreasing sequence which contains all the elements of both sequences. For example, the median of S1 and S2 is 13.</p><p>Given two increasing sequences of integers, you are asked to find their median.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, each gives the information of a sequence. For each sequence, the first positive integer N (≤2×105) is the size of that sequence. Then N integers follow, separated by a space. It is guaranteed that all the integers are in the range of <strong>long int</strong>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the median of the two given sequences in a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 11 12 13 14</span><br><span class="line">5 9 10 15 16 17结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[1000010];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=m;i&lt;m+n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+m+n);</span><br><span class="line">    </span><br><span class="line">    if((m+n)%2==0)</span><br><span class="line">        cout&lt;&lt;a[(m+n)/2-1];</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt;a[(m+n)/2];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1029-Median-25-分&quot;&gt;&lt;a href=&quot;#1029-Median-25-分&quot; class=&quot;headerlink&quot; title=&quot;1029 Median (25 分)&quot;&gt;&lt;/a&gt;1029 Median (25 分)&lt;/h1&gt;&lt;p&gt;Given an i</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1031</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1031%20Hello%20World%20for%20U%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1031%20Hello%20World%20for%20U%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:20:54.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1031-Hello-World-for-U-20-分"><a href="#1031-Hello-World-for-U-20-分" class="headerlink" title="1031 Hello World for U (20 分)"></a>1031 Hello World for U (20 分)</h1><p>Given any string of <em>N</em> (≥5) characters, you are asked to form the characters into the shape of <code>U</code>. For example, <code>helloworld</code> can be printed as:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h  d</span><br><span class="line">e  l</span><br><span class="line">l  r</span><br><span class="line">lowo</span><br></pre></td></tr></table></figure><p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with <em>n</em>1 characters, then left to right along the bottom line with <em>n</em>2 characters, and finally bottom-up along the vertical line with <em>n</em>3 characters. And more, we would like <code>U</code> to be as squared as possible – that is, it must be satisfied that <em>n</em>1=<em>n</em>3=<em>ma**x</em> { <em>k</em> | <em>k</em>≤<em>n</em>2 for all 3≤<em>n</em>2≤<em>N</em> } with <em>n</em>1+<em>n</em>2+<em>n</em>3−2=<em>N</em>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the input string in the shape of U as specified in the description.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helloworld!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h   !</span><br><span class="line">e   d</span><br><span class="line">l   l</span><br><span class="line">lowor结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    int n1=(str.length()+2)/3;</span><br><span class="line">    int n2=str.length()+2-n1-n1;</span><br><span class="line">    for(int i=1;i&lt;=n1-1;i++)&#123;</span><br><span class="line">        printf(&quot;%c&quot;,str[i-1]);</span><br><span class="line">        for(int j=1;j&lt;=n2-2;j++)&#123;</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%c&quot;,str[str.length()-i]);</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int k=n1-1;k&lt;=str.length()-n1;k++)&#123;</span><br><span class="line">        printf(&quot;%c&quot;,str[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1031-Hello-World-for-U-20-分&quot;&gt;&lt;a href=&quot;#1031-Hello-World-for-U-20-分&quot; class=&quot;headerlink&quot; title=&quot;1031 Hello World for U (20 分)&quot;&gt;&lt;/a&gt;103</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1036</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1036%20Boys%20vs%20Girls%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1036%20Boys%20vs%20Girls%20(25%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:21:16.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1036-Boys-vs-Girls-25-分"><a href="#1036-Boys-vs-Girls-25-分" class="headerlink" title="1036 Boys vs Girls (25 分)"></a>1036 Boys vs Girls (25 分)</h1><p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> lines of student information. Each line contains a student’s <code>name</code>, <code>gender</code>, <code>ID</code> and <code>grade</code>, separated by a space, where <code>name</code> and <code>ID</code> are strings of no more than 10 characters with no space, <code>gender</code> is either <code>F</code> (female) or <code>M</code> (male), and <code>grade</code> is an integer between 0 and 100. It is guaranteed that all the grades are distinct.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in 3 lines. The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade. The third line gives the difference <em>g<strong>r</strong>a<strong>d</strong>e**F</em>−<em>g<strong>r</strong>a<strong>d</strong>e**M</em>. If one such kind of student is missing, output <code>Absent</code> in the corresponding line, and output <code>NA</code> in the third line instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Joe M Math990112 89</span><br><span class="line">Mike M CS991301 100</span><br><span class="line">Mary F EE990830 95结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mary EE990830</span><br><span class="line">Joe Math990112</span><br><span class="line">6结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Jean M AA980920 60结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Absent</span><br><span class="line">Jean AA980920</span><br><span class="line">NA结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student&#123;</span><br><span class="line">    char name[11];</span><br><span class="line">    char male;</span><br><span class="line">    char id[11];</span><br><span class="line">    int score;</span><br><span class="line">&#125; temp,lowest,highst;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    lowest.score = 101;</span><br><span class="line">    highst.score = 0;</span><br><span class="line">    int n,number_of_male = 0,number_of_female = 0,difference = 0;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">   scanf(&quot;%s %c %s %d&quot;,temp.name,&amp;temp.male,temp.id,&amp;temp.score);</span><br><span class="line">        if(temp.male == &#x27;M&#x27; &amp;&amp; temp.score &lt; lowest.score)&#123;</span><br><span class="line">            number_of_male++;</span><br><span class="line">            lowest = temp;</span><br><span class="line">        &#125;</span><br><span class="line">         if(temp.male == &#x27;F&#x27; &amp;&amp; temp.score &gt; highst.score)&#123;</span><br><span class="line">            number_of_female++;</span><br><span class="line">            highst = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    difference = highst.score - lowest.score;</span><br><span class="line">    if(number_of_female)&#123;</span><br><span class="line">        printf(&quot;%s %s\n&quot;,highst.name,highst.id);</span><br><span class="line">    &#125;else</span><br><span class="line">        printf(&quot;Absent\n&quot;);</span><br><span class="line">    </span><br><span class="line">    if(number_of_male)&#123;</span><br><span class="line">        printf(&quot;%s %s\n&quot;,lowest.name,lowest.id);</span><br><span class="line">    &#125;else</span><br><span class="line">        printf(&quot;Absent\n&quot;);</span><br><span class="line">    </span><br><span class="line">    if(number_of_male == 0 || number_of_female == 0)&#123;</span><br><span class="line">        printf(&quot;NA\n&quot;);</span><br><span class="line">    &#125;else</span><br><span class="line">        printf(&quot;%d\n&quot;,difference);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1036-Boys-vs-Girls-25-分&quot;&gt;&lt;a href=&quot;#1036-Boys-vs-Girls-25-分&quot; class=&quot;headerlink&quot; title=&quot;1036 Boys vs Girls (25 分)&quot;&gt;&lt;/a&gt;1036 Boys vs Gi</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1005</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1041%20Be%20Unique%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1041%20Be%20Unique%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:21:52.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1041-Be-Unique-20-分"><a href="#1041-Be-Unique-20-分" class="headerlink" title="1041 Be Unique (20 分)"></a>1041 Be Unique (20 分)</h1><p>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,104]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a line which begins with a positive integer <em>N</em> (≤105) and then followed by <em>N</em> bets. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the winning number in a line. If there is no winner, print <code>None</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7 5 31 5 88 67 88 17</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">31</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 888 666 666 888 888</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int number[100010]=&#123;0&#125;;</span><br><span class="line">int name[100100];</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;name[i]);</span><br><span class="line">        number[name[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    int flag = -1;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(number[name[i]]==1)&#123;</span><br><span class="line">            flag = name[i];</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    if(flag==-1)printf(&quot;None&quot;);</span><br><span class="line">    else printf(&quot;%d&quot;,flag);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1041-Be-Unique-20-分&quot;&gt;&lt;a href=&quot;#1041-Be-Unique-20-分&quot; class=&quot;headerlink&quot; title=&quot;1041 Be Unique (20 分)&quot;&gt;&lt;/a&gt;1041 Be Unique (20 分)&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1035</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1035%20Password%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1035%20Password%20(20%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:21:03.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1035-Password-20-分"><a href="#1035-Password-20-分" class="headerlink" title="1035 Password (20 分)"></a>1035 Password (20 分)</h1><p>To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish <code>1</code> (one) from <code>l</code> (<code>L</code> in lowercase), or <code>0</code> (zero) from <code>O</code> (<code>o</code> in uppercase). One solution is to replace <code>1</code> (one) by <code>@</code>, <code>0</code> (zero) by <code>%</code>, <code>l</code> by <code>L</code>, and <code>O</code> by <code>o</code>. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em> (≤1000), followed by <em>N</em> lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the number <em>M</em> of accounts that have been modified, then print in the following <em>M</em> lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line <code>There are N accounts and no account is modified</code> where <code>N</code> is the total number of accounts. However, if <code>N</code> is one, you must print <code>There is 1 account and no account is modified</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Team000002 Rlsp0dfa</span><br><span class="line">Team000003 perfectpwd</span><br><span class="line">Team000001 R1spOdfa结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">Team000002 RLsp%dfa</span><br><span class="line">Team000001 R@spodfa结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">team110 abcdefg332结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There is 1 account and no account is modified</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">team110 abcdefg222</span><br><span class="line">team220 abcdefg333结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There are 2 accounts and no account is modified</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*思路：</span><br><span class="line">1.用结构体去组织数据，结构体内加一个sign来记录是否修改过</span><br><span class="line">2.在循环内判断并修改，用变量m记录需要修改的个数</span><br><span class="line">3.输出：其中单组数据和多组数据的英文输出不一样</span><br><span class="line">        输出分为有修改的和没修改的两类</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct user&#123;</span><br><span class="line">    char team[15];</span><br><span class="line">    char password[15];</span><br><span class="line">    int sign;</span><br><span class="line">&#125; people[1001];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int m=0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%s %s&quot;,people[i].team,people[i].password);</span><br><span class="line">        people[i].sign=1;</span><br><span class="line">        int len=strlen(people[i].password);</span><br><span class="line">        for(int j=0;j&lt;len;j++)&#123;</span><br><span class="line">            if(people[i].password[j]==&#x27;1&#x27;)&#123;</span><br><span class="line">                people[i].password[j]=&#x27;@&#x27;;</span><br><span class="line">                people[i].sign=0;</span><br><span class="line">            &#125;else if(people[i].password[j]==&#x27;0&#x27;)&#123;</span><br><span class="line">                people[i].password[j]=&#x27;%&#x27;;</span><br><span class="line">                people[i].sign=0;</span><br><span class="line">            &#125;else if(people[i].password[j]==&#x27;l&#x27;)&#123;</span><br><span class="line">                people[i].password[j]=&#x27;L&#x27;;</span><br><span class="line">                people[i].sign=0;</span><br><span class="line">            &#125;else if(people[i].password[j]==&#x27;O&#x27;)&#123;</span><br><span class="line">                people[i].password[j]=&#x27;o&#x27;;</span><br><span class="line">                people[i].sign=0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(people[i].sign==0) m++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(m==0)&#123;</span><br><span class="line">        if(n==1)&#123;</span><br><span class="line">            printf(&quot;There is %d account and no account is modified&quot;,n);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;There are %d accounts and no account is modified&quot;,n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,m);</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            if(people[i].sign==0)&#123;</span><br><span class="line">                printf(&quot;%s %s\n&quot;,people[i].team,people[i].password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1035-Password-20-分&quot;&gt;&lt;a href=&quot;#1035-Password-20-分&quot; class=&quot;headerlink&quot; title=&quot;1035 Password (20 分)&quot;&gt;&lt;/a&gt;1035 Password (20 分)&lt;/h1&gt;&lt;p&gt;To</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT 1038</title>
    <link href="http://macrohao.hithub.io/2021/07/01/1038%20Recover%20the%20Smallest%20Number%20(30%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/07/01/1038%20Recover%20the%20Smallest%20Number%20(30%20%E5%88%86)/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-09-27T07:21:41.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1038-Recover-the-Smallest-Number-30-分"><a href="#1038-Recover-the-Smallest-Number-30-分" class="headerlink" title="1038 Recover the Smallest Number (30 分)"></a>1038 Recover the Smallest Number (30 分)</h1><p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given { 32, 321, 3214, 0229, 87 }, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case gives a positive integer <em>N</em> (≤104) followed by <em>N</em> number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the smallest number in one line. Notice that the first digit must not be zero.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 32 321 3214 0229 87</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22932132143287</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">string str[10010];</span><br><span class="line">bool cmp(string a,string b)&#123;</span><br><span class="line">    return a+b &lt; b+a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(str,str+n,cmp);</span><br><span class="line">    string ans;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        ans+=str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    while(ans.size()&gt;0&amp;&amp;ans[0]==&#x27;0&#x27;)&#123;</span><br><span class="line">        ans.erase(ans.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    if(ans.size()==0) cout&lt;&lt;0;</span><br><span class="line">    else cout&lt;&lt;ans;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1038-Recover-the-Smallest-Number-30-分&quot;&gt;&lt;a href=&quot;#1038-Recover-the-Smallest-Number-30-分&quot; class=&quot;headerlink&quot; title=&quot;1038 Recover the S</summary>
      
    
    
    
    
    <category term="PAT" scheme="http://macrohao.hithub.io/tags/PAT/"/>
    
  </entry>
  
</feed>
