<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>macrohaoのBLOG</title>
  
  <subtitle>振浩的个人博客</subtitle>
  <link href="http://macrohao.hithub.io/atom.xml" rel="self"/>
  
  <link href="http://macrohao.hithub.io/"/>
  <updated>2021-11-13T09:57:36.533Z</updated>
  <id>http://macrohao.hithub.io/</id>
  
  <author>
    <name>史振浩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单工厂设计模式</title>
    <link href="http://macrohao.hithub.io/2021/11/13/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://macrohao.hithub.io/2021/11/13/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-13T09:49:23.000Z</published>
    <updated>2021-11-13T09:57:36.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-工厂方法模式"><a href="#一、-工厂方法模式" class="headerlink" title="一、 工厂方法模式"></a>一、 工厂方法模式</h1><h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h2><p>小王去面试，面试官让他使用面向对象的方法写一个计算器。要求很简单，给两个数字和一个操作符，直接输出结果。</p><h2 id="2-直接梭哈"><a href="#2-直接梭哈" class="headerlink" title="2. 直接梭哈"></a>2. 直接梭哈</h2><p>小王一顿操作猛如虎，直接打开IDE给梭哈了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> number01,number02;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个数字：&quot;</span>);</span><br><span class="line">        number01 = in.nextInt();</span><br><span class="line">        number02 = in.nextInt();</span><br><span class="line">        String operator;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入操作符：(+、-、*、/)&quot;</span>);</span><br><span class="line">        operator = in.next();</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operator)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>: result = number01 + number02;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>: result = number01 - number02;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>: result = number01 * number01;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (number02 == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;除数为0，无法进行除法运算！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = number01 * <span class="number">1.0</span> / number02;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>面试官看了代码之后，让小王回家等消息，便没了后续。仔细看上面的代码，没有使用面向对象的方法，从而导致了很多问题：</p><ul><li>数据外显非常严重</li><li>当代码量足够大时，易读性很差</li><li>代码维护困难</li></ul><p>这个问题有很多个设计方法，这里使用工厂模式进行优化。</p><h2 id="3-工厂模式简介"><a href="#3-工厂模式简介" class="headerlink" title="3. 工厂模式简介"></a>3. 工厂模式简介</h2><p><img src="https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png" alt="工厂方法模式"></p><ul><li><em>图片来自refactoringguru.cn</em></li></ul><p>工厂模式顾名思义就是创建产品，其在父类中提供一个创造对象的方法，允许子类根据具体的需求区实例化具体的对象。</p><p>比如：</p><p>加法操作：子类实例一个加法对象。</p><p>减法操作：子类区实例一个减法对象。</p><h2 id="4-工厂模式优化代码"><a href="#4-工厂模式优化代码" class="headerlink" title="4. 工厂模式优化代码"></a>4. 工厂模式优化代码</h2><p><strong>优化思路：</strong></p><p>将不同的操作（加减乘除）从父类中分离出来，工厂类根据操作符的不同区实例化不同的子类对象。</p><p><strong>类图：</strong></p><p><img src="C:\Users\shizhenhao\AppData\Roaming\Typora\typora-user-images\image-20211113173349410.png" alt="image-20211113173349410"></p><p><strong>优化后代码：</strong></p><p>Calculator父类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number01 ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number02 ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number01;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.number01 = in.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number02;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.number02 = in.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getresult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    AddOperation子类:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class AddOperation extends Calculator02&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getresult() &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        result = this.getNumber01() + this.getNumber02();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SubOperation子类:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SubOperation extends Calculator02&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getresult() &#123;</span><br><span class="line">        double result = this.getNumber01() - this.getNumber02();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MulOperation子类:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MulOperation extends Calculator02&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getresult() &#123;</span><br><span class="line">        double result = this.getNumber01() * this.getNumber02();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DivOperation子类:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DivOperation extends Calculator02&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getresult() &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        if (this.getNumber02() == 0) &#123;</span><br><span class="line">            System.out.println(&quot;除数为0，无法操作！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        result = this.getNumber01() / this.getNumber02();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂化方法类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FactoryOperation &#123;</span><br><span class="line">    public static Calculator02 creatOperation(String operate)&#123;</span><br><span class="line">        Calculator02 oper = null;</span><br><span class="line">        switch (operate)&#123;</span><br><span class="line">            case &quot;+&quot;:</span><br><span class="line">                oper = new AddOperation();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;-&quot;:</span><br><span class="line">                oper = new SubOperation();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;*&quot;:</span><br><span class="line">                oper = new MulOperation();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;/&quot;:</span><br><span class="line">                oper = new DivOperation();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return oper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Calculator02 calculator02;</span><br><span class="line">        calculator02 = FactoryOperation.creatOperation(&quot;+&quot;);</span><br><span class="line">        calculator02.setNumber01();</span><br><span class="line">        calculator02.setNumber02();</span><br><span class="line">        double result = calculator02.getresult();</span><br><span class="line">        System.out.println(&quot;result = &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul><li>大话设计模式</li><li><a href="refactoringguru.cn">设计模式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-工厂方法模式&quot;&gt;&lt;a href=&quot;#一、-工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;一、 工厂方法模式&quot;&gt;&lt;/a&gt;一、 工厂方法模式&lt;/h1&gt;&lt;h2 id=&quot;1-需求&quot;&gt;&lt;a href=&quot;#1-需求&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="design-patern" scheme="http://macrohao.hithub.io/tags/design-patern/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1093%20Count%20PAT&#39;s%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1093%20Count%20PAT&#39;s%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.097Z</published>
    <updated>2021-09-27T23:39:15.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1093-Count-PAT’s-25-分"><a href="#1093-Count-PAT’s-25-分" class="headerlink" title="1093 Count PAT’s (25 分)"></a>1093 Count PAT’s (25 分)</h1><p>The string <code>APPAPT</code> contains two <code>PAT</code>‘s as substrings. The first one is formed by the 2nd, the 4th, and the 6th characters, and the second one is formed by the 3rd, the 4th, and the 6th characters.</p><p>Now given any string, you are supposed to tell the number of <code>PAT</code>‘s contained in the string.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, there is only one line giving a string of no more than 105 characters containing only <code>P</code>, <code>A</code>, or <code>T</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the number of <code>PAT</code>‘s contained in the string. Since the result may be a huge number, you only have to output the result moded by 1000000007.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APPAPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char a[100010];</span><br><span class="line">int leftp[100010]=&#123;0&#125;;</span><br><span class="line">int rightt[100010]=&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    scanf(&quot;%s&quot;,a);</span><br><span class="line">    int len = strlen(a);</span><br><span class="line">    int ans = 0;</span><br><span class="line">    int p=0,t=0;</span><br><span class="line">    for(int i = 0 ;i &lt; len ;i++)&#123;</span><br><span class="line">        if(a[i]==&#x27;P&#x27;) p++;</span><br><span class="line">        if(a[i]==&#x27;A&#x27;) leftp[i]=p;</span><br><span class="line">    &#125;</span><br><span class="line">      for(int i = len-1 ;i &gt;=0 ;i--)&#123;</span><br><span class="line">        if(a[i]==&#x27;T&#x27;) t++;</span><br><span class="line">        if(a[i]==&#x27;A&#x27;) rightt[i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">      for(int i = 0 ;i &lt; len ;i++)&#123;</span><br><span class="line">        if(left[i]!=0) ans =(ans+ leftp[i]*rightt[i])%1000000007;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1093-Count-PAT’s-25-分&quot;&gt;&lt;a href=&quot;#1093-Count-PAT’s-25-分&quot; class=&quot;headerlink&quot; title=&quot;1093 Count PAT’s (25 分)&quot;&gt;&lt;/a&gt;1093 Count PAT’s (25 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1092%20To%20Buy%20or%20Not%20to%20Buy%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1092%20To%20Buy%20or%20Not%20to%20Buy%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.095Z</published>
    <updated>2021-09-27T23:39:15.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1092-To-Buy-or-Not-to-Buy-20-分"><a href="#1092-To-Buy-or-Not-to-Buy-20-分" class="headerlink" title="1092 To Buy or Not to Buy (20 分)"></a>1092 To Buy or Not to Buy (20 分)</h1><p>Eva would like to make a string of beads with her favorite colors so she went to a small shop to buy some beads. There were many colorful strings of beads. However the owner of the shop would only sell the strings in whole pieces. Hence Eva must check whether a string in the shop contains all the beads she needs. She now comes to you for help: if the answer is <code>Yes</code>, please tell her the number of extra beads she has to buy; or if the answer is <code>No</code>, please tell her the number of beads missing from the string.</p><p>For the sake of simplicity, let’s use the characters in the ranges [0-9], [a-z], and [A-Z] to represent the colors. For example, the 3rd string in Figure 1 is the one that Eva would like to make. Then the 1st string is okay since it contains all the necessary beads with 8 extra ones; yet the 2nd one is not since there is no black bead and one less red bead.</p><p><img src="https://images.ptausercontent.com/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg" alt="figbuy.jpg"></p><p>Figure 1</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case gives in two lines the strings of no more than 1000 beads which belong to the shop owner and Eva, respectively.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your answer in one line. If the answer is <code>Yes</code>, then also output the number of extra beads Eva has to buy; or if the answer is <code>No</code>, then also output the number of beads missing from the string. There must be exactly 1 space between the answer and the number.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ppRYYGrrYBR2258</span><br><span class="line">YrR8RrY结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Yes 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ppRYYGrrYB225</span><br><span class="line">YrR8RrY结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int  hashtable[100]=&#123;0&#125;,miss=0;</span><br><span class="line">int change(char c)&#123;</span><br><span class="line">    int temp;</span><br><span class="line">    if(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) temp=c-&#x27;0&#x27;;</span><br><span class="line">    if(c&gt;=&#x27;A&#x27;&amp;&amp;c&lt;=&#x27;Z&#x27;) temp=c-&#x27;A&#x27;+10;</span><br><span class="line">    if(c&gt;=&#x27;a&#x27;&amp;&amp;c&lt;=&#x27;z&#x27;) temp=c-&#x27;a&#x27;+36;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char str1[1010],str2[1010];</span><br><span class="line">    scanf(&quot;%s%s&quot;,str1,str2);</span><br><span class="line">    int len1=strlen(str1);</span><br><span class="line">    int len2=strlen(str2);</span><br><span class="line">    for(int i=0;i&lt;len1;i++)&#123;</span><br><span class="line">        char c = str1[i];</span><br><span class="line">        hashtable[change(c)]++;</span><br><span class="line">    &#125;</span><br><span class="line">     for(int i=0;i&lt;len2;i++)&#123;</span><br><span class="line">        char c = str2[i];</span><br><span class="line">        hashtable[change(c)]--;</span><br><span class="line">         if(hashtable[change(c)]&lt;0) miss++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(miss&lt;=0)&#123;</span><br><span class="line">        printf(&quot;Yes %d&quot;,len1-len2);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;No %d&quot;,miss);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1092-To-Buy-or-Not-to-Buy-20-分&quot;&gt;&lt;a href=&quot;#1092-To-Buy-or-Not-to-Buy-20-分&quot; class=&quot;headerlink&quot; title=&quot;1092 To Buy or Not to Buy (20 分)</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1088%20Rational%20Arithmetic%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1088%20Rational%20Arithmetic%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.093Z</published>
    <updated>2021-09-27T23:39:15.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1088-Rational-Arithmetic-20-分"><a href="#1088-Rational-Arithmetic-20-分" class="headerlink" title="1088 Rational Arithmetic (20 分)"></a>1088 Rational Arithmetic (20 分)</h1><p>For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case, which gives in one line the two rational numbers in the format <code>a1/b1 a2/b2</code>. The numerators and the denominators are all in the range of long int. If there is a negative sign, it must appear only in front of the numerator. The denominators are guaranteed to be non-zero numbers.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in 4 lines the sum, difference, product and quotient of the two rational numbers, respectively. The format of each line is <code>number1 operator number2 = result</code>. Notice that all the rational numbers must be in their simplest form <code>k a/b</code>, where <code>k</code> is the integer part, and <code>a/b</code> is the simplest fraction part. If the number is negative, it must be included in a pair of parentheses. If the denominator in the division is zero, output <code>Inf</code> as the result. It is guaranteed that all the output integers are in the range of <strong>long int</strong>.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2/3 -4/2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2/3 + (-2) = (-1 1/3)</span><br><span class="line">2/3 - (-2) = 2 2/3</span><br><span class="line">2/3 * (-2) = (-1 1/3)</span><br><span class="line">2/3 / (-2) = (-1/3)结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5/3 0/6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2/3 + 0 = 1 2/3</span><br><span class="line">1 2/3 - 0 = 1 2/3</span><br><span class="line">1 2/3 * 0 = 0</span><br><span class="line">1 2/3 / 0 = Inf结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">ll gcd(ll a,ll b)&#123;</span><br><span class="line">    return b==0?a:gcd(b,a%b);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct fraction&#123;</span><br><span class="line">    ll up,down;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fraction reduction(fraction result)&#123;</span><br><span class="line">    if(result.down&lt;0)&#123;</span><br><span class="line">        result.up = -result.up;</span><br><span class="line">        result.down = -result.down;</span><br><span class="line">    &#125;</span><br><span class="line">    if(result.up==0)&#123;</span><br><span class="line">        result.down = 1;</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        int d = gcd (abs(result.up),abs(result.down));</span><br><span class="line">        result.up = result.up/d;</span><br><span class="line">        result.down = result.down/d;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fraction add(fraction a,fraction b)&#123;</span><br><span class="line">    fraction result;</span><br><span class="line">    result.up = a.up * b.down + a.down * b.up;</span><br><span class="line">    result.down = a.down * b.down;</span><br><span class="line">    </span><br><span class="line">    return reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fraction minus1(fraction a,fraction b)&#123;</span><br><span class="line">    fraction result;</span><br><span class="line">    result.up = a.up * b.down - a.down * b.up;</span><br><span class="line">    result.down = a.down * b.down;</span><br><span class="line"></span><br><span class="line">    return reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fraction divid(fraction a,fraction b)&#123;</span><br><span class="line">    fraction result;</span><br><span class="line">    result.up = a.up * b.down; </span><br><span class="line">    result.down = a.down * b.up;</span><br><span class="line">    </span><br><span class="line">    return reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fraction multi(fraction a,fraction b)&#123;</span><br><span class="line">    fraction result;</span><br><span class="line">    result.up = a.up * b.up; </span><br><span class="line">    result.down = a.down * b.down;</span><br><span class="line"></span><br><span class="line">    return reduction(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showresult(fraction a)&#123;</span><br><span class="line">    a = reduction(a);</span><br><span class="line">    if(a.up&lt;0) printf(&quot;(&quot;);</span><br><span class="line">    if(a.down==1) printf(&quot;%lld&quot;,a.up);</span><br><span class="line">    else if(abs(a.up)&gt;a.down)&#123;</span><br><span class="line">            printf(&quot;%lld %lld/%lld&quot;,a.up/a.down,abs(a.up)%a.down,a.down);</span><br><span class="line">    &#125;else  printf(&quot;%lld/%lld&quot;,a.up,a.down);</span><br><span class="line">   if(a.up&lt;0) printf(&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    fraction a,b,ans1,ans2,ans3,ans4;</span><br><span class="line">   scanf(&quot;%lld/%lld&quot;,&amp;a.up,&amp;a.down);</span><br><span class="line">   scanf(&quot;%lld/%lld&quot;,&amp;b.up,&amp;b.down);</span><br><span class="line">    reduction(a);</span><br><span class="line">    reduction(b);</span><br><span class="line">    </span><br><span class="line">    ans1 = add(a,b);</span><br><span class="line">    ans2 = minus1(a,b);</span><br><span class="line">    ans3 = multi(a,b);</span><br><span class="line">    ans4 = divid(a,b);</span><br><span class="line">    showresult(a); printf(&quot; + &quot;);showresult(b);printf(&quot; = &quot;);showresult(ans1);printf(&quot;\n&quot;);</span><br><span class="line">    showresult(a); printf(&quot; - &quot;);showresult(b);printf(&quot; = &quot;);showresult(ans2);printf(&quot;\n&quot;);</span><br><span class="line">    showresult(a); printf(&quot; * &quot;);showresult(b);printf(&quot; = &quot;);showresult(ans3);printf(&quot;\n&quot;);</span><br><span class="line">    showresult(a); printf(&quot; / &quot;);showresult(b);printf(&quot; = &quot;);if(reduction(ans4).up==0) printf(&quot;Inf&quot;);else showresult(ans4);printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1088-Rational-Arithmetic-20-分&quot;&gt;&lt;a href=&quot;#1088-Rational-Arithmetic-20-分&quot; class=&quot;headerlink&quot; title=&quot;1088 Rational Arithmetic (20 分)&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1085%20Perfect%20Sequence%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1085%20Perfect%20Sequence%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.091Z</published>
    <updated>2021-09-27T23:39:15.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1085-Perfect-Sequence-25-分"><a href="#1085-Perfect-Sequence-25-分" class="headerlink" title="1085 Perfect Sequence (25 分)"></a>1085 Perfect Sequence (25 分)</h1><p>Given a sequence of positive integers and another positive integer <em>p</em>. The sequence is said to be a <strong>perfect sequence</strong> if <em>M</em>≤<em>m</em>×<em>p</em> where <em>M</em> and <em>m</em> are the maximum and minimum numbers in the sequence, respectively.</p><p>Now given a sequence and a parameter <em>p</em>, you are supposed to find from the sequence as many numbers as possible to form a perfect subsequence.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> and <em>p</em>, where <em>N</em> (≤105) is the number of integers in the sequence, and <em>p</em> (≤109) is the parameter. In the second line there are <em>N</em> positive integers, each is no greater than 109.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the maximum number of integers that can be chosen to form a perfect subsequence.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 8</span><br><span class="line">2 3 20 4 5 1 6 7 8 9结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[100010];</span><br><span class="line">int n;</span><br><span class="line">long long p;</span><br><span class="line">int twodiv(int i,long long x)&#123;</span><br><span class="line">    if(a[n-1]&lt; x) return n;</span><br><span class="line">    int l = i+1;</span><br><span class="line">    int r = n-1;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid = (r+l)/2;</span><br><span class="line">        if(a[mid]&gt;x) r = mid ;</span><br><span class="line">        else l = mid +1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   </span><br><span class="line">    scanf(&quot;%d%lld&quot;,&amp;n,&amp;p);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   sort(a,a+n);</span><br><span class="line">    int ans =0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        int j = twodiv(i,(long long)p*a[i]);</span><br><span class="line">        ans = max(ans,j - i);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1085-Perfect-Sequence-25-分&quot;&gt;&lt;a href=&quot;#1085-Perfect-Sequence-25-分&quot; class=&quot;headerlink&quot; title=&quot;1085 Perfect Sequence (25 分)&quot;&gt;&lt;/a&gt;1085 P</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1084%20Broken%20Keyboard%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1084%20Broken%20Keyboard%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.089Z</published>
    <updated>2021-09-27T23:39:15.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1084-Broken-Keyboard-20-分"><a href="#1084-Broken-Keyboard-20-分" class="headerlink" title="1084 Broken Keyboard (20 分)"></a>1084 Broken Keyboard (20 分)</h1><p>On a broken keyboard, some of the keys are worn out. So when you type some sentences, the characters corresponding to those keys will not appear on screen.</p><p>Now given a string that you are supposed to type, and the string that you actually type out, please list those keys which are for sure worn out.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the 1st line contains the original string, and the 2nd line contains the typed-out string. Each string contains no more than 80 characters which are either English letters [A-Z] (case insensitive), digital numbers [0-9], or <code>_</code> (representing the space). It is guaranteed that both strings are non-empty.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the keys that are worn out, in the order of being detected. The English letters must be capitalized. Each worn out key must be printed once only. It is guaranteed that there is at least one worn out key.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7_This_is_a_test</span><br><span class="line">_hs_s_a_es结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7TI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char str1[90],str2[90];</span><br><span class="line">bool hashtable[128] = &#123;false&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    scanf(&quot;%s %s&quot;, str1, str2);</span><br><span class="line">    int len1 = strlen(str1);</span><br><span class="line">    int len2 = strlen(str2);</span><br><span class="line">   for(int i=0;i&lt;len1;i++)&#123;</span><br><span class="line">       if(str1[i]&gt;=&#x27;a&#x27;&amp;&amp;str1[i]&lt;=&#x27;z&#x27;)</span><br><span class="line">           str1[i] -= 32;</span><br><span class="line">   &#125;</span><br><span class="line"> for(int i=0;i&lt;len2;i++)&#123;</span><br><span class="line">   if(str2[i]&gt;=&#x27;a&#x27;&amp;&amp;str2[i]&lt;=&#x27;z&#x27;)</span><br><span class="line">       str2[i] -= 32;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i=0;i&lt;len1;i++)&#123;</span><br><span class="line">        bool flag = false;</span><br><span class="line">        for(int j=0;j&lt;len2;j++)&#123;</span><br><span class="line">            if(str1[i] == str2[j])&#123;</span><br><span class="line">                flag = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        char c = str1[i];</span><br><span class="line">        if(flag == false&amp;&amp;hashtable[c]!=true)&#123;</span><br><span class="line">            printf(&quot;%c&quot;,c);</span><br><span class="line">            hashtable[c] = true;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1084-Broken-Keyboard-20-分&quot;&gt;&lt;a href=&quot;#1084-Broken-Keyboard-20-分&quot; class=&quot;headerlink&quot; title=&quot;1084 Broken Keyboard (20 分)&quot;&gt;&lt;/a&gt;1084 Brok</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1083%20List%20Grades%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1083%20List%20Grades%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.087Z</published>
    <updated>2021-09-27T23:39:15.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1083-List-Grades-25-分"><a href="#1083-List-Grades-25-分" class="headerlink" title="1083 List Grades (25 分)"></a>1083 List Grades (25 分)</h1><p>Given a list of <em>N</em> student records with name, ID and grade. You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case is given in the following format:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N</span><br><span class="line">name[1] ID[1] grade[1]</span><br><span class="line">name[2] ID[2] grade[2]</span><br><span class="line">... ...</span><br><span class="line">name[N] ID[N] grade[N]</span><br><span class="line">grade1 grade2</span><br></pre></td></tr></table></figure><p>where <code>name[i]</code> and <code>ID[i]</code> are strings of no more than 10 characters with no space, <code>grade[i]</code> is an integer in [0, 100], <code>grade1</code> and <code>grade2</code> are the boundaries of the grade’s interval. It is guaranteed that all the grades are <strong>distinct</strong>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the student records of which the grades are in the given interval [<code>grade1</code>, <code>grade2</code>] and are in non-increasing order. Each student record occupies a line with the student’s name and ID, separated by one space. If there is no student’s grade in that interval, output <code>NONE</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">Tom CS000001 59</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br><span class="line">60 100结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Mary EE990830</span><br><span class="line">Joe Math990112结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">Jean AA980920 60</span><br><span class="line">Ann CS01 80</span><br><span class="line">90 95结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NONE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student&#123;</span><br><span class="line">    char name[15];</span><br><span class="line">    char id[15];</span><br><span class="line">    int grade;</span><br><span class="line">&#125;stu[10010];</span><br><span class="line">bool cmp(student a,student b)&#123;</span><br><span class="line">    return a.grade&gt;b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,left,right;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%s %s %d&quot;,stu[i].name,stu[i].id,&amp;stu[i].grade);</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;left,&amp;right);</span><br><span class="line">    sort(stu,stu+n,cmp);</span><br><span class="line">    int cnt=n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(stu[i].grade&gt;=left&amp;&amp;stu[i].grade&lt;=right)&#123;</span><br><span class="line">            printf(&quot;%s %s\n&quot;,stu[i].name,stu[i].id);</span><br><span class="line">            cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(cnt==n)&#123;</span><br><span class="line">        printf(&quot;NONE\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1083-List-Grades-25-分&quot;&gt;&lt;a href=&quot;#1083-List-Grades-25-分&quot; class=&quot;headerlink&quot; title=&quot;1083 List Grades (25 分)&quot;&gt;&lt;/a&gt;1083 List Grades (25 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1082%20Read%20Number%20in%20Chinese%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1082%20Read%20Number%20in%20Chinese%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.085Z</published>
    <updated>2021-09-27T23:39:15.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1082-Read-Number-in-Chinese-25-分"><a href="#1082-Read-Number-in-Chinese-25-分" class="headerlink" title="1082 Read Number in Chinese (25 分)"></a>1082 Read Number in Chinese (25 分)</h1><p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way. Output <code>Fu</code> first if it is negative. For example, -123456789 is read as <code>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</code>. Note: zero (<code>ling</code>) must be handled correctly according to the Chinese tradition. For example, 100800 is <code>yi Shi Wan ling ba Bai</code>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in a line the Chinese way of reading the number. The characters are separated by a space and there must be no extra space at the end of the line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-123456789</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yi Shi Wan ling ba Bai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char digit[10][5] = &#123; &quot;ling&quot;, &quot;yi&quot;, &quot;er&quot;, &quot;san&quot;, &quot;si&quot;, &quot;wu&quot;, &quot;liu&quot;, &quot;qi&quot;, &quot;ba&quot;, &quot;jiu&quot; &#125;, place1[3][5] = &#123; &quot;&quot;, &quot; Wan&quot;, &quot; Yi&quot; &#125;, place2[4][6] = &#123; &quot;&quot;, &quot; Shi&quot;, &quot; Bai&quot;, &quot; Qian&quot; &#125;, str[10];</span><br><span class="line">    int num;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">    if( num &lt;= 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s&quot;, num &lt; 0 ? &quot;Fu &quot;:&quot;ling&quot;);</span><br><span class="line">        num *= -1;</span><br><span class="line">    &#125;</span><br><span class="line">    sprintf(str, &quot;%d&quot;, num);</span><br><span class="line">    for( int i = 0, zero = 0, tag = 0, j = strlen(str) - 1; i &lt; strlen(str); ++i, --j )</span><br><span class="line">    &#123;</span><br><span class="line">        if( str[i] == &#x27;0&#x27; )</span><br><span class="line">            zero = 1;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%s%s%s%s&quot;, i ? &quot; &quot;:&quot;&quot;, zero ? &quot;ling &quot;:&quot;&quot;, digit[ str[i] - &#x27;0&#x27; ], place2[j % 4]);</span><br><span class="line">            tag = 1;</span><br><span class="line">            zero = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if( j % 4 == 0 &amp;&amp; tag )</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%s&quot;, place1[ j / 4 ]);</span><br><span class="line">            tag = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1082-Read-Number-in-Chinese-25-分&quot;&gt;&lt;a href=&quot;#1082-Read-Number-in-Chinese-25-分&quot; class=&quot;headerlink&quot; title=&quot;1082 Read Number in Chinese </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1081%20Rational%20Sum%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1081%20Rational%20Sum%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.083Z</published>
    <updated>2021-09-27T23:39:15.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1081-Rational-Sum-20-分"><a href="#1081-Rational-Sum-20-分" class="headerlink" title="1081 Rational Sum (20 分)"></a>1081 Rational Sum (20 分)</h1><p>Given <em>N</em> rational numbers in the form <code>numerator/denominator</code>, you are supposed to calculate their sum.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a positive integer <em>N</em> (≤100), followed in the next line <em>N</em> rational numbers <code>a1/b1 a2/b2 ...</code> where all the numerators and denominators are in the range of <strong>long int</strong>. If there is a negative number, then the sign must appear in front of the numerator.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output the sum in the simplest form <code>integer numerator/denominator</code> where <code>integer</code> is the integer part of the sum, <code>numerator</code> &lt; <code>denominator</code>, and the numerator and the denominator have no common factor. You must output only the fractional part if the integer part is 0.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">2/5 4/15 1/30 -2/60 8/3结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1/3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1/3 -1/6 1/8结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7/24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll gcd(ll a,ll b)&#123;</span><br><span class="line">    return b==0 ? a : gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line">struct fraction&#123;</span><br><span class="line">   ll up,down;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fraction reduction (fraction a)&#123;</span><br><span class="line">    if(a.down&lt;0)&#123;</span><br><span class="line">        a.up = -a.up;</span><br><span class="line">        a.down = -a.down;</span><br><span class="line">    &#125;</span><br><span class="line">    if(a.up==0)&#123;</span><br><span class="line">        a.down=1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int d = gcd(abs(a.up),abs(a.down));</span><br><span class="line">        a.up = a.up/d;</span><br><span class="line">        a.down = a.down/d;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fraction add(fraction a,fraction b)&#123;</span><br><span class="line">    fraction temp;</span><br><span class="line">    temp.up=a.up * b.down + a.down * b.up;</span><br><span class="line">    temp.down = a.down * b.down;</span><br><span class="line">    return reduction(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showresult(fraction a)&#123;</span><br><span class="line">    reduction(a);</span><br><span class="line">    if(a.down==1) printf(&quot;%lld\n&quot;,a.up);</span><br><span class="line">    else if(abs(a.up)&gt;a.down)</span><br><span class="line">        printf(&quot;%lld %lld/%lld\n&quot;,a.up/a.down,abs(a.up)%a.down,a.down);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%lld/%lld\n&quot;,a.up,a.down);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    fraction result,temp;</span><br><span class="line">    result.up=0;</span><br><span class="line">    result.down=1;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%lld/%lld&quot;,&amp;temp.up,&amp;temp.down);</span><br><span class="line">        result = add(result,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    showresult(result);</span><br><span class="line">    return 0;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1081-Rational-Sum-20-分&quot;&gt;&lt;a href=&quot;#1081-Rational-Sum-20-分&quot; class=&quot;headerlink&quot; title=&quot;1081 Rational Sum (20 分)&quot;&gt;&lt;/a&gt;1081 Rational Sum </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1077%20Kuchiguse%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1077%20Kuchiguse%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.081Z</published>
    <updated>2021-09-27T23:39:15.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1077-Kuchiguse-20-分"><a href="#1077-Kuchiguse-20-分" class="headerlink" title="1077 Kuchiguse (20 分)"></a>1077 Kuchiguse (20 分)</h1><p>The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s personality. Such a preference is called “Kuchiguse” and is often exaggerated artistically in Anime and Manga. For example, the artificial sentence ending particle “nyan~” is often used as a stereotype for characters with a cat-like personality:</p><ul><li>Itai nyan~ (It hurts, nyan~)</li><li>Ninjin wa iyada nyan~ (I hate carrots, nyan~)</li></ul><p>Now given a few lines spoken by the same character, can you find her Kuchiguse?</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line is an integer <em>N</em> (2≤<em>N</em>≤100). Following are <em>N</em> file lines of 0~256 (inclusive) characters in length, each representing a character’s spoken line. The spoken lines are case sensitive.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the kuchiguse of the character, i.e., the longest common suffix of all <em>N</em> lines. If there is no such suffix, write <code>nai</code>.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Itai nyan~</span><br><span class="line">Ninjin wa iyadanyan~</span><br><span class="line">uhhh nyan~结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nyan~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Itai!</span><br><span class="line">Ninjinnwaiyada T_T</span><br><span class="line">T_T结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,ans=0;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    int len = 256;</span><br><span class="line">    string str[110];</span><br><span class="line">    cin.get();</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        getline(cin,str[i]);</span><br><span class="line">        if(str[i].size()&lt;len) len = str[i].size();</span><br><span class="line">        reverse(str[i].begin(),str[i].end());</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">        char c = str[0][i];</span><br><span class="line">        int sign=1;</span><br><span class="line">        for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">            if(c!=str[j][i])&#123;</span><br><span class="line">                sign=0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(sign) ans++;</span><br><span class="line">        else  break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ans==0)&#123;</span><br><span class="line">        printf(&quot;nai&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(int i=ans-1;i&gt;=0;i--)&#123;</span><br><span class="line">            printf(&quot;%c&quot;,str[0][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1077-Kuchiguse-20-分&quot;&gt;&lt;a href=&quot;#1077-Kuchiguse-20-分&quot; class=&quot;headerlink&quot; title=&quot;1077 Kuchiguse (20 分)&quot;&gt;&lt;/a&gt;1077 Kuchiguse (20 分)&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1070%20Mooncake%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1070%20Mooncake%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.079Z</published>
    <updated>2021-09-27T23:39:15.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1070-Mooncake-25-分"><a href="#1070-Mooncake-25-分" class="headerlink" title="1070 Mooncake (25 分)"></a>1070 Mooncake (25 分)</h1><p>Mooncake is a Chinese bakery product traditionally eaten during the Mid-Autumn Festival. Many types of fillings and crusts can be found in traditional mooncakes according to the region’s culture. Now given the inventory amounts and the prices of all kinds of the mooncakes, together with the maximum total demand of the market, you are supposed to tell the maximum profit that can be made.</p><p>Note: partial inventory storage can be taken. The sample shows the following situation: given three kinds of mooncakes with inventory amounts being 180, 150, and 100 thousand tons, and the prices being 7.5, 7.2, and 4.5 billion yuans. If the market demand can be at most 200 thousand tons, the best we can do is to sell 150 thousand tons of the second kind of mooncake, and 50 thousand tons of the third kind. Hence the total profit is 7.2 + 4.5/2 = 9.45 (billion yuans).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers <em>N</em> (≤1000), the number of different kinds of mooncakes, and <em>D</em> (≤500 thousand tons), the maximum total demand of the market. Then the second line gives the positive inventory amounts (in thousand tons), and the third line gives the positive prices (in billion yuans) of <em>N</em> kinds of mooncakes. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the maximum profit (in billion yuans) in one line, accurate up to 2 decimal places.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 200</span><br><span class="line">180 150 100</span><br><span class="line">7.5 7.2 4.5结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9.45</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct mooncake&#123;</span><br><span class="line">    double store;</span><br><span class="line">    double price;</span><br><span class="line">    double perprice;</span><br><span class="line">&#125;moon[1010];</span><br><span class="line">bool cmp(mooncake a,mooncake b)&#123;</span><br><span class="line">    return a.perprice &gt; b.perprice;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,d;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;d);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%lf&quot;,&amp;moon[i].store);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%lf&quot;,&amp;moon[i].price);</span><br><span class="line">        moon[i].perprice = 1.0*moon[i].price / moon[i].store;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(moon,moon+n,cmp);</span><br><span class="line">    </span><br><span class="line">    double sum=0.0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(moon[i].store&lt;=d)&#123;</span><br><span class="line">            sum += moon[i].price;</span><br><span class="line">            d = d - moon[i].store;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            sum += 1.0*d / moon[i].store *moon[i].price;</span><br><span class="line">            d=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%.2lf&quot;,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1070-Mooncake-25-分&quot;&gt;&lt;a href=&quot;#1070-Mooncake-25-分&quot; class=&quot;headerlink&quot; title=&quot;1070 Mooncake (25 分)&quot;&gt;&lt;/a&gt;1070 Mooncake (25 分)&lt;/h1&gt;&lt;p&gt;Mo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1069%20The%20Black%20Hole%20of%20Numbers%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1069%20The%20Black%20Hole%20of%20Numbers%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.077Z</published>
    <updated>2021-09-27T23:39:15.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1069-The-Black-Hole-of-Numbers-20-分"><a href="#1069-The-Black-Hole-of-Numbers-20-分" class="headerlink" title="1069 The Black Hole of Numbers (20 分)"></a>1069 The Black Hole of Numbers (20 分)</h1><p>For any 4-digit integer except the ones with all the digits being the same, if we sort the digits in non-increasing order first, and then in non-decreasing order, a new number can be obtained by taking the second number from the first one. Repeat in this manner we will soon end up at the number <code>6174</code> – the <strong>black hole</strong> of 4-digit numbers. This number is named Kaprekar Constant.</p><p>For example, start from <code>6767</code>, we’ll get:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>Given any 4-digit number, you are supposed to illustrate the way it gets into the black hole.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case which gives a positive integer <em>N</em> in the range (0,104).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>If all the 4 digits of <em>N</em> are the same, print in one line the equation <code>N - N = 0000</code>. Else print each step of calculation in a line until <code>6174</code> comes out as the difference. All the numbers must be printed as 4-digit numbers.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6767</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2222</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2222 - 2222 = 0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool cmp(int a,int b)&#123;</span><br><span class="line">    return a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line">int to_number(int a[])&#123;</span><br><span class="line">    int sum=0;</span><br><span class="line">    for(int i =0;i&lt;4;i++)&#123;</span><br><span class="line">        sum = sum*10 +a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">void to_array(int a[],int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">        a[i]=n%10;</span><br><span class="line">        n = n/10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,min,max;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        int a[4];</span><br><span class="line">        to_array(a,n);</span><br><span class="line">        sort(a,a+4);</span><br><span class="line">        min = to_number(a);</span><br><span class="line">        sort(a,a+4,cmp);</span><br><span class="line">        max=to_number(a);</span><br><span class="line">        n=max-min;</span><br><span class="line">        printf(&quot;%04d - %04d = %04d\n&quot;,max,min,max-min);</span><br><span class="line">        if(n==0||n==6174)</span><br><span class="line">            break;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1069-The-Black-Hole-of-Numbers-20-分&quot;&gt;&lt;a href=&quot;#1069-The-Black-Hole-of-Numbers-20-分&quot; class=&quot;headerlink&quot; title=&quot;1069 The Black Hole of</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1067%20Sort%20with%20Swap(0,%20i)%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1067%20Sort%20with%20Swap(0,%20i)%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.075Z</published>
    <updated>2021-09-27T23:39:15.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1067-Sort-with-Swap-0-i-25-分"><a href="#1067-Sort-with-Swap-0-i-25-分" class="headerlink" title="1067 Sort with Swap(0, i) (25 分)"></a>1067 Sort with Swap(0, i) (25 分)</h1><p>Given any permutation of the numbers {0, 1, 2,…, <em>N</em>−1}, it is easy to sort them in increasing order. But what if <code>Swap(0, *)</code> is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swap(0, 1) =&gt; &#123;4, 1, 2, 0, 3&#125;</span><br><span class="line">Swap(0, 3) =&gt; &#123;4, 1, 2, 3, 0&#125;</span><br><span class="line">Swap(0, 4) =&gt; &#123;0, 1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><p>Now you are asked to find the minimum number of swaps need to sort the given permutation of the first <em>N</em> nonnegative integers.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case, which gives a positive <em>N</em> (≤105) followed by a permutation sequence of {0, 1, …, <em>N</em>−1}. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, simply print in a line the minimum number of swaps need to sort the given permutation.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">3 5 7 2 6 4 9 0 8 1结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int pos[100010];</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,num,ans=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int left = 0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">        pos[num]=i;</span><br><span class="line">        if(num!=i&amp;num!=0) left++;</span><br><span class="line">    &#125;</span><br><span class="line">    int k=1;</span><br><span class="line">    while(left&gt;0)&#123;</span><br><span class="line">        if(pos[0]==0)&#123;</span><br><span class="line">            while(k&lt;n)&#123;</span><br><span class="line">                if(pos[k]!=k)&#123;</span><br><span class="line">                    swap(pos[0],pos[k]);</span><br><span class="line">                    ans++;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while(pos[0]!=0)&#123;</span><br><span class="line">            swap(pos[0],pos[pos[0]]);</span><br><span class="line">            ans++;</span><br><span class="line">            left--;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1067-Sort-with-Swap-0-i-25-分&quot;&gt;&lt;a href=&quot;#1067-Sort-with-Swap-0-i-25-分&quot; class=&quot;headerlink&quot; title=&quot;1067 Sort with Swap(0, i) (25 分)&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1065%20A+B%20and%20C%20(64bit)%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1065%20A+B%20and%20C%20(64bit)%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.073Z</published>
    <updated>2021-09-27T23:39:15.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1065-A-B-and-C-64bit-20-分"><a href="#1065-A-B-and-C-64bit-20-分" class="headerlink" title="1065 A+B and C (64bit) (20 分)"></a>1065 A+B and C (64bit) (20 分)</h1><p>Given three integers <em>A</em>, <em>B</em> and <em>C</em> in (−263,263), you are supposed to tell whether <em>A</em>+<em>B</em>&gt;<em>C</em>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>The first line of the input gives the positive number of test cases, <em>T</em> (≤10). Then <em>T</em> test cases follow, each consists of a single line containing three integers <em>A</em>, <em>B</em> and <em>C</em>, separated by single spaces.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line <code>Case #X: true</code> if <em>A</em>+<em>B</em>&gt;<em>C</em>, or <code>Case #X: false</code> otherwise, where <em>X</em> is the case number (starting from 1).</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">9223372036854775807 -9223372036854775808 0结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: false结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int cnt;</span><br><span class="line">    cin&gt;&gt;cnt;</span><br><span class="line">    for(int i=1;i&lt;=cnt;i++)&#123;</span><br><span class="line">        long long a,b,c;</span><br><span class="line">        scanf(&quot;%lld%lld%lld&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        bool flag;</span><br><span class="line">        long long res=a+b;</span><br><span class="line">        if(a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; res &lt; 0)</span><br><span class="line">            flag = true;</span><br><span class="line">        else if(a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; res &gt;= 0)&#123;</span><br><span class="line">            flag = false;</span><br><span class="line">        &#125;else if(res&gt;c)&#123;</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;else</span><br><span class="line">            flag = false;</span><br><span class="line">        if(flag == true)&#123;</span><br><span class="line">            printf(&quot;Case #%d: true\n&quot;,i);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;Case #%d: false\n&quot;,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1065-A-B-and-C-64bit-20-分&quot;&gt;&lt;a href=&quot;#1065-A-B-and-C-64bit-20-分&quot; class=&quot;headerlink&quot; title=&quot;1065 A+B and C (64bit) (20 分)&quot;&gt;&lt;/a&gt;1065 A+</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1058%20A+B%20in%20Hogwarts%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1058%20A+B%20in%20Hogwarts%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.071Z</published>
    <updated>2021-09-27T23:39:15.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1058-A-B-in-Hogwarts-20-分"><a href="#1058-A-B-in-Hogwarts-20-分" class="headerlink" title="1058 A+B in Hogwarts (20 分)"></a>1058 A+B in Hogwarts (20 分)</h1><p>If you are a fan of Harry Potter, you would know the world of magic has its own currency system – as Hagrid explained it to Harry, “Seventeen silver Sickles to a Galleon and twenty-nine Knuts to a Sickle, it’s easy enough.” Your job is to write a program to compute <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are given in the standard form of <code>Galleon.Sickle.Knut</code> (<code>Galleon</code> is an integer in [0,107], <code>Sickle</code> is an integer in [0, 17), and <code>Knut</code> is an integer in [0, 29)).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case which occupies a line with <em>A</em> and <em>B</em> in the standard form, separated by one space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.2.1 10.16.27</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14.1.28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int galleon = 29*17;</span><br><span class="line">const int sickle =29;</span><br><span class="line">int main()&#123;</span><br><span class="line">    long long g1,g2,s1,k1,s2,k2,sum;</span><br><span class="line">    scanf(&quot;%lld.%lld.%lld %lld.%lld.%lld&quot;,&amp;g1,&amp;s1,&amp;k1,&amp;g2,&amp;s2,&amp;k2);</span><br><span class="line">    sum =(g1+g2)*galleon+(s1+s2)*sickle+(k1+k2);</span><br><span class="line">    printf(&quot;%d.%d.%d&quot;,sum/17/29,sum/29%17,sum%29);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1058-A-B-in-Hogwarts-20-分&quot;&gt;&lt;a href=&quot;#1058-A-B-in-Hogwarts-20-分&quot; class=&quot;headerlink&quot; title=&quot;1058 A+B in Hogwarts (20 分)&quot;&gt;&lt;/a&gt;1058 A+B </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1055%20The%20World&#39;s%20Richest%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1055%20The%20World&#39;s%20Richest%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.068Z</published>
    <updated>2021-09-27T23:39:15.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1055-The-World’s-Richest-25-分"><a href="#1055-The-World’s-Richest-25-分" class="headerlink" title="1055 The World’s Richest (25 分)"></a>1055 The World’s Richest (25 分)</h1><p>Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate this job, but concentrate only on the people in a certain range of ages. That is, given the net worths of <em>N</em> people, you must find the <em>M</em> richest people in a given range of their ages.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: <em>N</em> (≤105) - the total number of people, and <em>K</em> (≤103) - the number of queries. Then <em>N</em> lines follow, each contains the name (string of no more than 8 characters without space), age (integer in (0, 200]), and the net worth (integer in [−106,106]) of a person. Finally there are <em>K</em> lines of queries, each contains three positive integers: <em>M</em> (≤100) - the maximum number of outputs, and [<code>Amin</code>, <code>Amax</code>] which are the range of ages. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print in a line <code>Case #X:</code> where <code>X</code> is the query number starting from 1. Then output the <em>M</em> richest people with their ages in the range [<code>Amin</code>, <code>Amax</code>]. Each person’s information occupies a line, in the format</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name Age Net_Worth</span><br></pre></td></tr></table></figure><p>The outputs must be in non-increasing order of the net worths. In case there are equal worths, it must be in non-decreasing order of the ages. If both worths and ages are the same, then the output must be in non-decreasing alphabetical order of the names. It is guaranteed that there is no two persons share all the same of the three pieces of information. In case no one is found, output <code>None</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 4</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Williams 30 -22</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Michael 5 300000</span><br><span class="line">Rosemary 40 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Nobody 5 0</span><br><span class="line">4 15 45</span><br><span class="line">4 30 35</span><br><span class="line">4 5 95</span><br><span class="line">1 45 50结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Case #1:</span><br><span class="line">Alice 18 88888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Case #2:</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Williams 30 -22</span><br><span class="line">Case #3:</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Michael 5 300000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Case #4:</span><br><span class="line">None结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct student&#123;</span><br><span class="line">    char name[10];</span><br><span class="line">    int age,wealth;</span><br><span class="line">&#125; stu[100010];</span><br><span class="line"></span><br><span class="line">bool cmp(student a,student b)&#123;</span><br><span class="line">    if(a.wealth!=b.wealth) return a.wealth &gt; b.wealth;</span><br><span class="line">    else if(a.age != b.age) return a.age &lt; b.age;</span><br><span class="line">    else return strcmp(a.name,b.name)&lt;0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,k;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;n,&amp;k);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%s %d %d&quot;,stu[i].name,&amp;stu[i].age,&amp;stu[i].wealth);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+n,cmp);</span><br><span class="line">    for(int i=1;i&lt;=k;i++)&#123;</span><br><span class="line">        int number,age1,age2;</span><br><span class="line">        scanf(&quot;%d %d %d&quot;,&amp;number,&amp;age1,&amp;age2);</span><br><span class="line">        int cnt = number;</span><br><span class="line">        printf(&quot;Case #%d:\n&quot;,i);</span><br><span class="line">        for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">            if(stu[j].age&gt;=age1&amp;&amp;stu[j].age&lt;=age2)&#123;</span><br><span class="line">                printf(&quot;%s %d %d\n&quot;,stu[j].name,stu[j].age,stu[j].wealth);</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            if(cnt==0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        if(cnt==number)&#123;</span><br><span class="line">                printf(&quot;None\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1055-The-World’s-Richest-25-分&quot;&gt;&lt;a href=&quot;#1055-The-World’s-Richest-25-分&quot; class=&quot;headerlink&quot; title=&quot;1055 The World’s Richest (25 分)&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1050%20String%20Subtraction%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1050%20String%20Subtraction%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.066Z</published>
    <updated>2021-09-27T23:39:15.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1050-String-Subtraction-20-分"><a href="#1050-String-Subtraction-20-分" class="headerlink" title="1050 String Subtraction (20 分)"></a>1050 String Subtraction (20 分)</h1><p>Given two strings <em>S</em>1 and <em>S</em>2, <em>S</em>=<em>S</em>1−<em>S</em>2 is defined to be the remaining string after taking all the characters in <em>S</em>2 from <em>S</em>1. Your task is simply to calculate <em>S</em>1−<em>S</em>2 for any given strings. However, it might not be that simple to do it <strong>fast</strong>.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case consists of two lines which gives <em>S</em>1 and <em>S</em>2, respectively. The string lengths of both strings are no more than 104. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print <em>S</em>1−<em>S</em>2 in one line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">They are students.</span><br><span class="line">aeiou结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thy r stdnts.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    string s2;</span><br><span class="line">    getline(cin,s1);</span><br><span class="line">    getline(cin,s2);</span><br><span class="line">    int len1 = s1.length();</span><br><span class="line">    int len2 = s2.length();</span><br><span class="line">    for(int i=0;i&lt;len1;i++)&#123;</span><br><span class="line">        bool flag = true;</span><br><span class="line">        for(int j=0;j&lt;len2;j++)&#123;</span><br><span class="line">            if(s1[i]==s2[j])</span><br><span class="line">                flag = false;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag) printf(&quot;%c&quot;,s1[i]);</span><br><span class="line">        else continue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1050-String-Subtraction-20-分&quot;&gt;&lt;a href=&quot;#1050-String-Subtraction-20-分&quot; class=&quot;headerlink&quot; title=&quot;1050 String Subtraction (20 分)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1048%20Find%20Coins%20(25%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1048%20Find%20Coins%20(25%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.064Z</published>
    <updated>2021-09-27T23:39:15.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1048-Find-Coins-25-分"><a href="#1048-Find-Coins-25-分" class="headerlink" title="1048 Find Coins (25 分)"></a>1048 Find Coins (25 分)</h1><p>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. Since she has as many as 105 coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: <em>N</em> (≤105, the total number of coins) and <em>M</em> (≤103, the amount of money Eva has to pay). The second line contains <em>N</em> face values of the coins, which are all positive numbers no more than 500. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the two face values <em>V</em>1 and <em>V</em>2 (separated by a space) such that <em>V</em>1+<em>V</em>2=<em>M</em> and <em>V</em>1≤<em>V</em>2. If such a solution is not unique, output the one with the smallest <em>V</em>1. If there is no solution, output <code>No Solution</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8 15</span><br><span class="line">1 2 8 7 2 4 11 15结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7 14</span><br><span class="line">1 8 7 2 4 11 15结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No Solution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int  hashtable[1010]=&#123;0&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">    for(int i = 0 ;i &lt; n;i++)&#123;</span><br><span class="line">        int temp;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;temp);</span><br><span class="line">        hashtable[temp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    int flag = 0,k;</span><br><span class="line">    for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">        if(i==m-i&amp;&amp;hashtable[i]&gt;=2)&#123;</span><br><span class="line">             flag=1;</span><br><span class="line">            k=i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;else if(hashtable[i]&gt;0&amp;&amp;hashtable[m-i]&gt;0&amp;&amp;i!=(m-i))&#123;</span><br><span class="line">            flag=1;</span><br><span class="line">            k=i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag)&#123;</span><br><span class="line">        printf(&quot;%d %d&quot;,k,m-k);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;No Solution&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1048-Find-Coins-25-分&quot;&gt;&lt;a href=&quot;#1048-Find-Coins-25-分&quot; class=&quot;headerlink&quot; title=&quot;1048 Find Coins (25 分)&quot;&gt;&lt;/a&gt;1048 Find Coins (25 分)&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1046%20Shortest%20Distance%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1046%20Shortest%20Distance%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.062Z</published>
    <updated>2021-09-27T23:39:15.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1046-Shortest-Distance-20-分"><a href="#1046-Shortest-Distance-20-分" class="headerlink" title="1046 Shortest Distance (20 分)"></a>1046 Shortest Distance (20 分)</h1><p>The task is really simple: given <em>N</em> exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <em>N</em> (in [3,105]), followed by <em>N</em> integer distances <em>D</em>1 <em>D</em>2 ⋯ <em>D**N</em>, where <em>D**i</em> is the distance between the <em>i</em>-th and the (<em>i</em>+1)-st exits, and <em>D**N</em> is between the <em>N</em>-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer <em>M</em> (≤104), with <em>M</em> lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to <em>N</em>. It is guaranteed that the total round trip distance is no more than 107.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in <em>M</em> lines, each contains the shortest distance between the corresponding given pair of exits.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 1 2 4 14 9</span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 1结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">7结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">vector&lt;int&gt; dis(n + 1);</span><br><span class="line">int sum=0,left,right,cnt;</span><br><span class="line">for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">int temp;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;temp);</span><br><span class="line">sum += temp;</span><br><span class="line">dis[i] = sum;</span><br><span class="line">&#125;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;cnt); </span><br><span class="line">for(int i = 0; i &lt; cnt; i++)&#123;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;left, &amp;right);</span><br><span class="line">if(left &gt; right)</span><br><span class="line">swap(left,right);</span><br><span class="line">int temp = dis[right - 1]-dis[left - 1];</span><br><span class="line">printf(&quot;%d\n&quot;,min(temp,sum - temp));</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1046-Shortest-Distance-20-分&quot;&gt;&lt;a href=&quot;#1046-Shortest-Distance-20-分&quot; class=&quot;headerlink&quot; title=&quot;1046 Shortest Distance (20 分)&quot;&gt;&lt;/a&gt;104</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://macrohao.hithub.io/2021/09/27/1042%20Shuffling%20Machine%20(20%20%E5%88%86)/"/>
    <id>http://macrohao.hithub.io/2021/09/27/1042%20Shuffling%20Machine%20(20%20%E5%88%86)/</id>
    <published>2021-09-27T07:25:48.060Z</published>
    <updated>2021-09-27T23:39:15.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1042-Shuffling-Machine-20-分"><a href="#1042-Shuffling-Machine-20-分" class="headerlink" title="1042 Shuffling Machine (20 分)"></a>1042 Shuffling Machine (20 分)</h1><p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p><p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S1, S2, ..., S13, </span><br><span class="line">H1, H2, ..., H13, </span><br><span class="line">C1, C2, ..., C13, </span><br><span class="line">D1, D2, ..., D13, </span><br><span class="line">J1, J2</span><br></pre></td></tr></table></figure><p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47结尾无空行</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define N 55</span><br><span class="line">char mp[5]=&#123;&#x27;S&#x27;,&#x27;H&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;J&#x27;&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">int start[N],next[N],end[N];</span><br><span class="line">for(int i=1;i&lt;55;i++)&#123;</span><br><span class="line">start[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=1;i&lt;55;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;next[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(n)&#123;</span><br><span class="line">for(int i=1;i&lt;55;i++)&#123;</span><br><span class="line">end[next[i]]=start[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;55;i++)&#123;</span><br><span class="line">start[i]=end[i];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;55;i++)&#123;</span><br><span class="line">        if(i&gt;1)</span><br><span class="line">            printf(&quot; &quot;);</span><br><span class="line">start[i]--;</span><br><span class="line">printf(&quot;%c%d&quot;,mp[start[i]/13],start[i]%13+1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1042-Shuffling-Machine-20-分&quot;&gt;&lt;a href=&quot;#1042-Shuffling-Machine-20-分&quot; class=&quot;headerlink&quot; title=&quot;1042 Shuffling Machine (20 分)&quot;&gt;&lt;/a&gt;104</summary>
      
    
    
    
    
  </entry>
  
</feed>
